<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 3.0.0 (20220226.1711)
 -->
<!-- Pages: 1 -->
<svg width="1277pt" height="577pt"
 viewBox="0.00 0.00 1277.00 577.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 573)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-573 1273,-573 1273,4 -4,4"/>
<!-- Fuzzer -->
<g id="node1" class="node">
<title>Fuzzer</title>
<g id="a_node1"><a xlink:href="Fuzzer.ipynb" xlink:title="Fuzzing: Breaking Things with Random Inputs (Fuzzer)&#10;&#10;In this chapter, we&#39;ll start with one of the simplest test generation techniques. &#160;The key idea of random text generation, also known as fuzzing, is to feed a string of random characters into a program in the hope to uncover failures.">
<polygon fill="white" stroke="black" points="788,-495 651,-495 651,-442 794,-442 794,-489 788,-495"/>
<polyline fill="none" stroke="black" points="788,-495 788,-489 "/>
<polyline fill="none" stroke="black" points="794,-489 788,-489 "/>
<text text-anchor="middle" x="722.5" y="-479.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing: Breaking</text>
<text text-anchor="middle" x="722.5" y="-464.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Things</text>
<text text-anchor="middle" x="722.5" y="-449.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">with Random Inputs</text>
</a>
</g>
</g>
<!-- Coverage -->
<g id="node2" class="node">
<title>Coverage</title>
<g id="a_node2"><a xlink:href="Coverage.ipynb" xlink:title="Code Coverage (Coverage)&#10;&#10;In the previous chapter, we introduced basic fuzzing – that is, generating random inputs to test programs. &#160;How do we measure the effectiveness of these tests? &#160;One way would be to check the number (and seriousness) of bugs found; but if bugs are scarce, we need a proxy for the likelihood of a test to uncover a bug. &#160;In this chapter, we introduce the concept of code coverage, measuring which parts of a program are actually executed during a test run. &#160;Measuring such coverage is also crucial for test generators that attempt to cover as much code as possible.">
<polygon fill="white" stroke="black" points="832,-331 731,-331 731,-295 838,-295 838,-325 832,-331"/>
<polyline fill="none" stroke="black" points="832,-331 832,-325 "/>
<polyline fill="none" stroke="black" points="838,-325 832,-325 "/>
<text text-anchor="middle" x="784.5" y="-309.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Code Coverage</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;Coverage -->
<g id="edge1" class="edge">
<title>Fuzzer&#45;&gt;Coverage</title>
<path fill="none" stroke="black" d="M671.04,-441.87C657.68,-432.53 644.96,-420.6 637.5,-406 629.82,-390.96 627.83,-381.85 637.5,-368 656.3,-341.06 690.11,-327.52 720.56,-320.73"/>
<polygon fill="black" stroke="black" points="721.63,-324.09 730.74,-318.68 720.24,-317.23 721.63,-324.09"/>
</g>
<!-- SearchBasedFuzzer -->
<g id="node3" class="node">
<title>SearchBasedFuzzer</title>
<g id="a_node3"><a xlink:href="SearchBasedFuzzer.ipynb" xlink:title="Search&#45;Based Fuzzing (SearchBasedFuzzer)&#10;&#10;Sometimes we are not only interested in fuzzing as many as possible diverse program inputs, but in deriving specific test inputs that achieve some objective, such as reaching specific statements in a program. When we have an idea of what we are looking for, then we can search for it. Search algorithms are at the core of computer science, but applying classic search algorithms like breadth or depth first search to search for tests is unrealistic, because these algorithms potentially require us to look at all possible inputs. However, domain&#45;knowledge can be used to overcome this problem. For example, if we can estimate which of several program inputs is closer to the one we are looking for, then this information can guide us to reach the target quicker – this information is known as a heuristic. The way heuristics are applied systematically is captured in meta&#45;heuristic search algorithms. The &quot;meta&quot; denotes that these algorithms are generic and can be instantiated differently to different problems. Meta&#45;heuristics often take inspiration from processes observed in nature. For example, there are algorithms mimicking evolutionary processes, swarm intelligence, or chemical reactions. In general they are much more efficient than exhaustive search approaches such that they can be applied to vast search spaces – search spaces as vast as the domain of program inputs are no problem for them.">
<polygon fill="white" stroke="black" points="792.5,-405 646.5,-405 646.5,-369 798.5,-369 798.5,-399 792.5,-405"/>
<polyline fill="none" stroke="black" points="792.5,-405 792.5,-399 "/>
<polyline fill="none" stroke="black" points="798.5,-399 792.5,-399 "/>
<text text-anchor="middle" x="722.5" y="-383.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Search&#45;Based Fuzzing</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;SearchBasedFuzzer -->
<g id="edge2" class="edge">
<title>Fuzzer&#45;&gt;SearchBasedFuzzer</title>
<path fill="none" stroke="black" d="M722.5,-441.91C722.5,-433.48 722.5,-424.08 722.5,-415.52"/>
<polygon fill="black" stroke="black" points="726,-415.26 722.5,-405.26 719,-415.26 726,-415.26"/>
</g>
<!-- Grammars -->
<g id="node4" class="node">
<title>Grammars</title>
<g id="a_node4"><a xlink:href="Grammars.ipynb" xlink:title="Fuzzing with Grammars (Grammars)&#10;&#10;In the chapter on &quot;Mutation&#45;Based Fuzzing&quot;, we have seen how to use extra hints – such as sample input files – to speed up test generation. &#160;In this chapter, we take this idea one step further, by providing a specification of the legal inputs to a program. &#160;Specifying inputs via a grammar allows for very systematic and efficient test generation, in particular for complex input formats. &#160;Grammars also serve as the base for configuration fuzzing, API fuzzing, GUI fuzzing, and many more.">
<polygon fill="white" stroke="black" points="529,-406 438,-406 438,-368 535,-368 535,-400 529,-406"/>
<polyline fill="none" stroke="black" points="529,-406 529,-400 "/>
<polyline fill="none" stroke="black" points="535,-400 529,-400 "/>
<text text-anchor="middle" x="486.5" y="-390.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing with</text>
<text text-anchor="middle" x="486.5" y="-375.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammars</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;Grammars -->
<g id="edge3" class="edge">
<title>Fuzzer&#45;&gt;Grammars</title>
<path fill="none" stroke="black" d="M650.73,-443.32C616.81,-431.9 576.84,-418.43 544.82,-407.65"/>
<polygon fill="black" stroke="black" points="545.75,-404.27 535.16,-404.39 543.52,-410.9 545.75,-404.27"/>
</g>
<!-- SymbolicFuzzer -->
<g id="node5" class="node">
<title>SymbolicFuzzer</title>
<g id="a_node5"><a xlink:href="SymbolicFuzzer.ipynb" xlink:title="Symbolic Fuzzing (SymbolicFuzzer)&#10;&#10;One of the problems with traditional methods of fuzzing is that they fail to exercise all the possible behaviors that a system can have, especially when the input space is large. Quite often the execution of a specific branch of execution may happen only with very specific inputs, which could represent an extremely small fraction of the input space. The traditional fuzzing methods relies on chance to produce inputs they need. However, relying on randomness to generate values that we want is a bad idea when the space to be explored is huge. For example, a function that accepts a string, even if one only considers the first $10$ characters, already has $2^{80}$ possible inputs. If one is looking for a specific string, random generation of values will take a few thousand years even in one of the super computers.">
<polygon fill="white" stroke="black" points="936,-405 817,-405 817,-369 942,-369 942,-399 936,-405"/>
<polyline fill="none" stroke="black" points="936,-405 936,-399 "/>
<polyline fill="none" stroke="black" points="942,-399 936,-399 "/>
<text text-anchor="middle" x="879.5" y="-383.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Symbolic Fuzzing</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;SymbolicFuzzer -->
<g id="edge4" class="edge">
<title>Fuzzer&#45;&gt;SymbolicFuzzer</title>
<path fill="none" stroke="black" d="M773.04,-441.91C793.62,-431.48 817.16,-419.57 836.86,-409.59"/>
<polygon fill="black" stroke="black" points="838.56,-412.65 845.9,-405.01 835.4,-406.41 838.56,-412.65"/>
</g>
<!-- FuzzingInTheLarge -->
<g id="node6" class="node">
<title>FuzzingInTheLarge</title>
<g id="a_node6"><a xlink:href="FuzzingInTheLarge.ipynb" xlink:title="Fuzzing in the Large (FuzzingInTheLarge)&#10;&#10;In the past chapters, we have always looked at fuzzing taking place on one machine for a few seconds only. &#160;In the real world, however, fuzzers are run on dozens or even thousands of machines; for hours, days and weeks; for one program or dozens of programs. &#160;In such contexts, one needs an infrastructure to collect failure data from the individual fuzzer runs, and to aggregate such data in a central repository. &#160;In this chapter, we will examine such an infrastructure, the FuzzManager framework from Mozilla.">
<polygon fill="white" stroke="black" points="1094.5,-405 960.5,-405 960.5,-369 1100.5,-369 1100.5,-399 1094.5,-405"/>
<polyline fill="none" stroke="black" points="1094.5,-405 1094.5,-399 "/>
<polyline fill="none" stroke="black" points="1100.5,-399 1094.5,-399 "/>
<text text-anchor="middle" x="1030.5" y="-383.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing in the Large</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;FuzzingInTheLarge -->
<g id="edge5" class="edge">
<title>Fuzzer&#45;&gt;FuzzingInTheLarge</title>
<path fill="none" stroke="black" d="M794.32,-448.96C842.47,-436.53 905.76,-420.2 954.71,-407.56"/>
<polygon fill="black" stroke="black" points="955.81,-410.89 964.61,-405.01 954.06,-404.12 955.81,-410.89"/>
</g>
<!-- MutationFuzzer -->
<g id="node8" class="node">
<title>MutationFuzzer</title>
<g id="a_node8"><a xlink:href="MutationFuzzer.ipynb" xlink:title="Mutation&#45;Based Fuzzing (MutationFuzzer)&#10;&#10;Most randomly generated inputs are syntactically invalid and thus are quickly rejected by the processing program. &#160;To exercise functionality beyond input processing, we must increase chances to obtain valid inputs. &#160;One such way is so&#45;called mutational fuzzing – that is, introducing small changes to existing inputs that may still keep the input valid, yet exercise new behavior. &#160;We show how to create such mutations, and how to guide them towards yet uncovered code, applying central concepts from the popular AFL fuzzer.">
<polygon fill="white" stroke="black" points="977.5,-258 865.5,-258 865.5,-220 983.5,-220 983.5,-252 977.5,-258"/>
<polyline fill="none" stroke="black" points="977.5,-258 977.5,-252 "/>
<polyline fill="none" stroke="black" points="983.5,-252 977.5,-252 "/>
<text text-anchor="middle" x="924.5" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Mutation&#45;Based</text>
<text text-anchor="middle" x="924.5" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;MutationFuzzer -->
<g id="edge7" class="edge">
<title>Coverage&#45;&gt;MutationFuzzer</title>
<path fill="none" stroke="black" d="M817.68,-294.94C836.33,-285.34 859.86,-273.24 880.08,-262.84"/>
<polygon fill="black" stroke="black" points="881.82,-265.89 889.11,-258.2 878.62,-259.66 881.82,-265.89"/>
</g>
<!-- MutationAnalysis -->
<g id="node9" class="node">
<title>MutationAnalysis</title>
<g id="a_node9"><a xlink:href="MutationAnalysis.ipynb" xlink:title="Mutation Analysis (MutationAnalysis)&#10;&#10;In the chapter on coverage, we showed how one can identify which parts of the program are executed by a program, and hence get a sense of the effectiveness of a set of test cases in covering the program structure. &#160;However, coverage alone may not be the best measure for the effectiveness of a test, as one can have great coverage without ever checking a result for correctness. &#160;In this chapter, we introduce another means for assessing the effectiveness of a test suite: After injecting mutations – artificial faults – into the code, we check whether a test suite can detect these artificial faults. &#160;The idea is that if it fails to detect such mutations, it will also miss real bugs.">
<polygon fill="white" stroke="black" points="1125.5,-257 1001.5,-257 1001.5,-221 1131.5,-221 1131.5,-251 1125.5,-257"/>
<polyline fill="none" stroke="black" points="1125.5,-257 1125.5,-251 "/>
<polyline fill="none" stroke="black" points="1131.5,-251 1125.5,-251 "/>
<text text-anchor="middle" x="1066.5" y="-235.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Mutation Analysis</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;MutationAnalysis -->
<g id="edge8" class="edge">
<title>Coverage&#45;&gt;MutationAnalysis</title>
<path fill="none" stroke="black" d="M838.21,-298.29C881.64,-287.2 943.29,-271.46 991.57,-259.13"/>
<polygon fill="black" stroke="black" points="992.53,-262.5 1001.35,-256.63 990.8,-255.72 992.53,-262.5"/>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node10" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node10"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="Grammar Coverage (GrammarCoverageFuzzer)&#10;&#10;Producing inputs from grammars gives all possible expansions of a rule the same likelihood. &#160;For producing a comprehensive test suite, however, it makes more sense to maximize variety – for instance, by not repeating the same expansions over and over again. &#160;In this chapter, we explore how to systematically cover elements of a grammar such that we maximize variety and do not miss out individual elements.">
<polygon fill="white" stroke="black" points="631.5,-257 501.5,-257 501.5,-221 637.5,-221 637.5,-251 631.5,-257"/>
<polyline fill="none" stroke="black" points="631.5,-257 631.5,-251 "/>
<polyline fill="none" stroke="black" points="637.5,-251 631.5,-251 "/>
<text text-anchor="middle" x="569.5" y="-235.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammar Coverage</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge9" class="edge">
<title>Coverage&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M733.55,-294.94C702.6,-284.57 662.91,-271.28 630.33,-260.37"/>
<polygon fill="black" stroke="black" points="631.05,-256.92 620.46,-257.07 628.83,-263.56 631.05,-256.92"/>
</g>
<!-- ProbabilisticGrammarFuzzer -->
<g id="node11" class="node">
<title>ProbabilisticGrammarFuzzer</title>
<g id="a_node11"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="Probabilistic Grammar Fuzzing (ProbabilisticGrammarFuzzer)&#10;&#10;Let us give grammars even more power by assigning probabilities to individual expansions. &#160;This allows us to control how many of each element should be produced, and thus allows us to target our generated tests towards specific functionality. &#160;We also show how to learn such probabilities from given sample inputs, and specifically direct our tests towards input features that are uncommon in these samples.">
<polygon fill="white" stroke="black" points="236,-184 115,-184 115,-146 242,-146 242,-178 236,-184"/>
<polyline fill="none" stroke="black" points="236,-184 236,-178 "/>
<polyline fill="none" stroke="black" points="242,-178 236,-178 "/>
<text text-anchor="middle" x="178.5" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Probabilistic</text>
<text text-anchor="middle" x="178.5" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammar Fuzzing</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;ProbabilisticGrammarFuzzer -->
<g id="edge10" class="edge">
<title>Coverage&#45;&gt;ProbabilisticGrammarFuzzer</title>
<path fill="none" stroke="black" d="M730.83,-308.79C604.88,-300.93 297.83,-279.76 256.5,-258 241.83,-250.28 215.47,-216.91 197.49,-192.58"/>
<polygon fill="black" stroke="black" points="200.24,-190.41 191.51,-184.41 194.59,-194.55 200.24,-190.41"/>
</g>
<!-- ConcolicFuzzer -->
<g id="node12" class="node">
<title>ConcolicFuzzer</title>
<g id="a_node12"><a xlink:href="ConcolicFuzzer.ipynb" xlink:title="Concolic Fuzzing (ConcolicFuzzer)&#10;&#10;In the chapter on information flow, we have seen how one can use dynamic taints to produce more intelligent test cases than simply looking for program crashes. We have also seen how one can use the taints to update the grammar, and hence focus more on the dangerous methods.">
<polygon fill="white" stroke="black" points="531,-109 418,-109 418,-73 537,-73 537,-103 531,-109"/>
<polyline fill="none" stroke="black" points="531,-109 531,-103 "/>
<polyline fill="none" stroke="black" points="537,-103 531,-103 "/>
<text text-anchor="middle" x="477.5" y="-87.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Concolic Fuzzing</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;ConcolicFuzzer -->
<g id="edge11" class="edge">
<title>Coverage&#45;&gt;ConcolicFuzzer</title>
<path fill="none" stroke="black" d="M798.9,-294.74C806.33,-284.7 814.63,-271.41 818.5,-258 823.18,-241.77 823.81,-236.03 818.5,-220 805.63,-181.1 798.24,-167.74 763.5,-146 758.88,-143.11 630.29,-119.53 547.13,-104.51"/>
<polygon fill="black" stroke="black" points="547.69,-101.05 537.22,-102.72 546.44,-107.94 547.69,-101.05"/>
</g>
<!-- DynamicInvariants -->
<g id="node13" class="node">
<title>DynamicInvariants</title>
<g id="a_node13"><a xlink:href="DynamicInvariants.ipynb" xlink:title="Mining Function Specifications (DynamicInvariants)&#10;&#10;When testing a program, one not only needs to cover its several behaviors; one also needs to check whether the result is as expected. &#160;In this chapter, we introduce a technique that allows us to mine function specifications from a set of given executions, resulting in abstract and formal descriptions of what the function expects and what it delivers.">
<polygon fill="white" stroke="black" points="1263,-258 1150,-258 1150,-220 1269,-220 1269,-252 1263,-258"/>
<polyline fill="none" stroke="black" points="1263,-258 1263,-252 "/>
<polyline fill="none" stroke="black" points="1269,-252 1263,-252 "/>
<text text-anchor="middle" x="1209.5" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Mining Function</text>
<text text-anchor="middle" x="1209.5" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Specifications</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;DynamicInvariants -->
<g id="edge12" class="edge">
<title>Coverage&#45;&gt;DynamicInvariants</title>
<path fill="none" stroke="black" d="M838.19,-305.64C906.17,-297.18 1027.02,-280.84 1139.9,-258.01"/>
<polygon fill="black" stroke="black" points="1140.65,-261.43 1149.75,-256 1139.25,-254.57 1140.65,-261.43"/>
</g>
<!-- WhenToStopFuzzing -->
<g id="node14" class="node">
<title>WhenToStopFuzzing</title>
<g id="a_node14"><a xlink:href="WhenToStopFuzzing.ipynb" xlink:title="When To Stop Fuzzing (WhenToStopFuzzing)&#10;&#10;In the past chapters, we have discussed several fuzzing techniques. &#160;Knowing what to do is important, but it is also important to know when to stop doing things. &#160;In this chapter, we will learn when to stop fuzzing – and use a prominent example for this purpose: The Enigma machine that was used in the second world war by the navy of Nazi Germany to encrypt communications, and how Alan Turing and I.J. Good used fuzzing techniques to crack ciphers for the Naval Enigma machine.">
<polygon fill="white" stroke="black" points="803.5,-257 655.5,-257 655.5,-221 809.5,-221 809.5,-251 803.5,-257"/>
<polyline fill="none" stroke="black" points="803.5,-257 803.5,-251 "/>
<polyline fill="none" stroke="black" points="809.5,-251 803.5,-251 "/>
<text text-anchor="middle" x="732.5" y="-235.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">When To Stop Fuzzing</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;WhenToStopFuzzing -->
<g id="edge13" class="edge">
<title>Coverage&#45;&gt;WhenToStopFuzzing</title>
<path fill="none" stroke="black" d="M772.18,-294.94C765.86,-286.19 758.03,-275.35 751.01,-265.63"/>
<polygon fill="black" stroke="black" points="753.79,-263.5 745.1,-257.44 748.11,-267.6 753.79,-263.5"/>
</g>
<!-- GrammarFuzzer -->
<g id="node17" class="node">
<title>GrammarFuzzer</title>
<g id="a_node17"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="Efficient Grammar Fuzzing (GrammarFuzzer)&#10;&#10;In the chapter on grammars, we have seen how to use grammars for very effective and efficient testing. &#160;In this chapter, we refine the previous string&#45;based algorithm into a tree&#45;based algorithm, which is much faster and allows for much more control over the production of fuzz inputs.">
<polygon fill="white" stroke="black" points="436.5,-332 312.5,-332 312.5,-294 442.5,-294 442.5,-326 436.5,-332"/>
<polyline fill="none" stroke="black" points="436.5,-332 436.5,-326 "/>
<polyline fill="none" stroke="black" points="442.5,-326 436.5,-326 "/>
<text text-anchor="middle" x="377.5" y="-316.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Efficient Grammar</text>
<text text-anchor="middle" x="377.5" y="-301.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing</text>
</a>
</g>
</g>
<!-- Grammars&#45;&gt;GrammarFuzzer -->
<g id="edge16" class="edge">
<title>Grammars&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M458.99,-367.83C445.18,-358.71 428.27,-347.54 413.45,-337.74"/>
<polygon fill="black" stroke="black" points="415.27,-334.75 405,-332.16 411.41,-340.59 415.27,-334.75"/>
</g>
<!-- Intro_Testing -->
<g id="node7" class="node">
<title>Intro_Testing</title>
<g id="a_node7"><a xlink:href="Intro_Testing.ipynb" xlink:title="Introduction to Software Testing (Intro_Testing)&#10;&#10;Before we get to the central parts of the book, let us introduce essential concepts of software testing. &#160;Why is it necessary to test software at all? &#160;How does one test software? &#160;How can one tell whether a test has been successful? &#160;How does one know if one has tested enough? &#160;In this chapter, let us recall the most important concepts, and at the same time get acquainted with Python and interactive notebooks.">
<polygon fill="white" stroke="black" points="777.5,-569 661.5,-569 661.5,-531 783.5,-531 783.5,-563 777.5,-569"/>
<polyline fill="none" stroke="black" points="777.5,-569 777.5,-563 "/>
<polyline fill="none" stroke="black" points="783.5,-563 777.5,-563 "/>
<text text-anchor="middle" x="722.5" y="-553.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Introduction to</text>
<text text-anchor="middle" x="722.5" y="-538.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Software Testing</text>
</a>
</g>
</g>
<!-- Intro_Testing&#45;&gt;Fuzzer -->
<g id="edge6" class="edge">
<title>Intro_Testing&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M722.5,-530.96C722.5,-523.32 722.5,-514.14 722.5,-505.23"/>
<polygon fill="black" stroke="black" points="726,-505 722.5,-495 719,-505 726,-505"/>
</g>
<!-- GreyboxFuzzer -->
<g id="node15" class="node">
<title>GreyboxFuzzer</title>
<g id="a_node15"><a xlink:href="GreyboxFuzzer.ipynb" xlink:title="Greybox Fuzzing (GreyboxFuzzer)&#10;&#10;In the previous chapter, we have introduced mutation&#45;based fuzzing, a technique that generates fuzz inputs by applying small mutations to given inputs. In this chapter, we show how to guide these mutations towards specific goals such as coverage. The algorithms in this chapter stem from the popular American Fuzzy Lop (AFL) fuzzer, in particular from its AFLFast and AFLGo flavors. We will explore the greybox fuzzing algorithm behind AFL and how we can exploit it to solve various problems for automated vulnerability detection.">
<polygon fill="white" stroke="black" points="979.5,-183 865.5,-183 865.5,-147 985.5,-147 985.5,-177 979.5,-183"/>
<polyline fill="none" stroke="black" points="979.5,-183 979.5,-177 "/>
<polyline fill="none" stroke="black" points="985.5,-177 979.5,-177 "/>
<text text-anchor="middle" x="925.5" y="-161.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Greybox Fuzzing</text>
</a>
</g>
</g>
<!-- MutationFuzzer&#45;&gt;GreyboxFuzzer -->
<g id="edge14" class="edge">
<title>MutationFuzzer&#45;&gt;GreyboxFuzzer</title>
<path fill="none" stroke="black" d="M924.75,-219.83C924.86,-211.89 924.99,-202.41 925.12,-193.63"/>
<polygon fill="black" stroke="black" points="928.62,-193.47 925.26,-183.42 921.62,-193.37 928.62,-193.47"/>
</g>
<!-- GrammarMiner -->
<g id="node22" class="node">
<title>GrammarMiner</title>
<g id="a_node22"><a xlink:href="GrammarMiner.ipynb" xlink:title="Mining Input Grammars (GrammarMiner)&#10;&#10;So far, the grammars we have seen have been mostly specified manually – that is, you (or the person knowing the input format) had to design and write a grammar in the first place. &#160;While the grammars we have seen so far have been rather simple, creating a grammar for complex inputs can involve quite some effort. &#160;In this chapter, we therefore introduce techniques that automatically mine grammars from programs – by executing the programs and observing how they process which parts of the input. &#160;In conjunction with a grammar fuzzer, this allows us to &#10;1. take a program, &#10;2. extract its input grammar, and &#10;3. fuzz it with high efficiency and effectiveness, using the concepts in this book.">
<polygon fill="white" stroke="black" points="385.5,-110 293.5,-110 293.5,-72 391.5,-72 391.5,-104 385.5,-110"/>
<polyline fill="none" stroke="black" points="385.5,-110 385.5,-104 "/>
<polyline fill="none" stroke="black" points="391.5,-104 385.5,-104 "/>
<text text-anchor="middle" x="342.5" y="-94.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Mining Input</text>
<text text-anchor="middle" x="342.5" y="-79.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammars</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;GrammarMiner -->
<g id="edge22" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;GrammarMiner</title>
<path fill="none" stroke="black" d="M583.53,-220.9C598.13,-200.91 616.55,-167.8 598.5,-146 543.67,-79.81 492.25,-129.32 408.5,-110 406.21,-109.47 403.87,-108.92 401.51,-108.34"/>
<polygon fill="black" stroke="black" points="402.32,-104.93 391.77,-105.89 400.61,-111.72 402.32,-104.93"/>
</g>
<!-- ConfigurationFuzzer -->
<g id="node23" class="node">
<title>ConfigurationFuzzer</title>
<g id="a_node23"><a xlink:href="ConfigurationFuzzer.ipynb" xlink:title="Testing Configurations (ConfigurationFuzzer)&#10;&#10;The behavior of a program is not only governed by its data. &#160;The configuration of a program – that is, the settings that govern the execution of a program on its (regular) input data, as set by options or configuration files – just as well influences behavior, and thus can and should be tested. &#160;In this chapter, we explore how to systematically test and cover software configurations. &#160;By automatically inferring configuration options, we can apply these techniques out of the box, with no need for writing a grammar. &#160;Finally, we show how to systematically cover combinations of configuration options, quickly detecting unwanted interferences.">
<polygon fill="white" stroke="black" points="749,-184 646,-184 646,-146 755,-146 755,-178 749,-184"/>
<polyline fill="none" stroke="black" points="749,-184 749,-178 "/>
<polyline fill="none" stroke="black" points="755,-178 749,-178 "/>
<text text-anchor="middle" x="700.5" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Testing</text>
<text text-anchor="middle" x="700.5" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Configurations</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;ConfigurationFuzzer -->
<g id="edge23" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;ConfigurationFuzzer</title>
<path fill="none" stroke="black" d="M600.55,-220.94C617.84,-211.43 639.62,-199.46 658.43,-189.12"/>
<polygon fill="black" stroke="black" points="660.31,-192.08 667.39,-184.2 656.94,-185.95 660.31,-192.08"/>
</g>
<!-- Carver -->
<g id="node24" class="node">
<title>Carver</title>
<g id="a_node24"><a xlink:href="Carver.ipynb" xlink:title="Carving Unit Tests (Carver)&#10;&#10;So far, we have always generated system input, i.e. data that the program as a whole obtains via its input channels. &#160;If we are interested in testing only a small set of functions, having to go through the system can be very inefficient. &#160;This chapter introduces a technique known as carving, which, given a system test, automatically extracts a set of unit tests that replicate the calls seen during the unit test. &#160;The key idea is to record such calls such that we can replay them later – as a whole or selectively. &#160;On top, we also explore how to synthesize API grammars from carved unit tests; this means that we can synthesize API tests without having to write a grammar at all.">
<polygon fill="white" stroke="black" points="539.5,-36 415.5,-36 415.5,0 545.5,0 545.5,-30 539.5,-36"/>
<polyline fill="none" stroke="black" points="539.5,-36 539.5,-30 "/>
<polyline fill="none" stroke="black" points="545.5,-30 539.5,-30 "/>
<text text-anchor="middle" x="480.5" y="-14.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Carving Unit Tests</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;Carver -->
<g id="edge24" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;Carver</title>
<path fill="none" stroke="black" d="M637.55,-221.12C691.84,-207.33 759.48,-189.29 763.5,-184 779.91,-162.4 757.75,-81.21 748.5,-72 721.83,-45.45 625.24,-31.45 555.66,-24.64"/>
<polygon fill="black" stroke="black" points="555.89,-21.15 545.6,-23.69 555.23,-28.12 555.89,-21.15"/>
</g>
<!-- GUIFuzzer -->
<g id="node25" class="node">
<title>GUIFuzzer</title>
<g id="a_node25"><a xlink:href="GUIFuzzer.ipynb" xlink:title="Testing Graphical User Interfaces (GUIFuzzer)&#10;&#10;In this chapter, we explore how to generate tests for Graphical User Interfaces (GUIs), abstracting from our previous examples on Web testing. &#160;Building on general means to extract user interface elements and activate them, our techniques generalize to arbitrary graphical user interfaces, from rich Web applications to mobile apps, and systematically explore user interfaces through forms and navigation elements.">
<polygon fill="white" stroke="black" points="583.5,-184 465.5,-184 465.5,-146 589.5,-146 589.5,-178 583.5,-184"/>
<polyline fill="none" stroke="black" points="583.5,-184 583.5,-178 "/>
<polyline fill="none" stroke="black" points="589.5,-178 583.5,-178 "/>
<text text-anchor="middle" x="527.5" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Testing Graphical</text>
<text text-anchor="middle" x="527.5" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">User Interfaces</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;GUIFuzzer -->
<g id="edge25" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;GUIFuzzer</title>
<path fill="none" stroke="black" d="M559.55,-220.94C554.66,-212.55 548.65,-202.26 543.16,-192.85"/>
<polygon fill="black" stroke="black" points="546.18,-191.07 538.12,-184.2 540.13,-194.6 546.18,-191.07"/>
</g>
<!-- APIFuzzer -->
<g id="node27" class="node">
<title>APIFuzzer</title>
<g id="a_node27"><a xlink:href="APIFuzzer.ipynb" xlink:title="Fuzzing APIs (APIFuzzer)&#10;&#10;So far, we have always generated system input, i.e. data that the program as a whole obtains via its input channels. &#160;However, we can also generate inputs that go directly into individual functions, gaining flexibility and speed in the process. &#160;In this chapter, we explore the use of grammars to synthesize code for function calls, which allows you to generate program code that very efficiently invokes functions directly.">
<polygon fill="white" stroke="black" points="220.5,-109 130.5,-109 130.5,-73 226.5,-73 226.5,-103 220.5,-109"/>
<polyline fill="none" stroke="black" points="220.5,-109 220.5,-103 "/>
<polyline fill="none" stroke="black" points="226.5,-103 220.5,-103 "/>
<text text-anchor="middle" x="178.5" y="-87.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing APIs</text>
</a>
</g>
</g>
<!-- ProbabilisticGrammarFuzzer&#45;&gt;APIFuzzer -->
<g id="edge29" class="edge">
<title>ProbabilisticGrammarFuzzer&#45;&gt;APIFuzzer</title>
<path fill="none" stroke="black" d="M178.5,-145.83C178.5,-137.89 178.5,-128.41 178.5,-119.63"/>
<polygon fill="black" stroke="black" points="182,-119.42 178.5,-109.42 175,-119.42 182,-119.42"/>
</g>
<!-- GreyboxGrammarFuzzer -->
<g id="node16" class="node">
<title>GreyboxGrammarFuzzer</title>
<g id="a_node16"><a xlink:href="GreyboxGrammarFuzzer.ipynb" xlink:title="Greybox Fuzzing with Grammars (GreyboxGrammarFuzzer)&#10;&#10;In this chapter, we introduce important extensions to our syntactic fuzzing techniques, all leveraging syntactic parts of existing inputs.">
<polygon fill="white" stroke="black" points="733.5,-110 587.5,-110 587.5,-72 739.5,-72 739.5,-104 733.5,-110"/>
<polyline fill="none" stroke="black" points="733.5,-110 733.5,-104 "/>
<polyline fill="none" stroke="black" points="739.5,-104 733.5,-104 "/>
<text text-anchor="middle" x="663.5" y="-94.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Greybox Fuzzing with</text>
<text text-anchor="middle" x="663.5" y="-79.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammars</text>
</a>
</g>
</g>
<!-- GreyboxFuzzer&#45;&gt;GreyboxGrammarFuzzer -->
<g id="edge15" class="edge">
<title>GreyboxFuzzer&#45;&gt;GreyboxGrammarFuzzer</title>
<path fill="none" stroke="black" d="M865.39,-147.48C827.85,-137.16 779.19,-123.79 739.05,-112.76"/>
<polygon fill="black" stroke="black" points="739.87,-109.36 729.3,-110.08 738.02,-116.11 739.87,-109.36"/>
</g>
<!-- GrammarFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge17" class="edge">
<title>GrammarFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M425.95,-293.83C452.88,-283.73 486.49,-271.13 514.42,-260.66"/>
<polygon fill="black" stroke="black" points="515.9,-263.84 524.04,-257.05 513.44,-257.28 515.9,-263.84"/>
</g>
<!-- Parser -->
<g id="node18" class="node">
<title>Parser</title>
<g id="a_node18"><a xlink:href="Parser.ipynb" xlink:title="Parsing Inputs (Parser)&#10;&#10;In the chapter on Grammars, we discussed how grammars can be&#10;used to represent various languages. We also saw how grammars can be used to&#10;generate strings of the corresponding language. Grammars can also perform the&#10;reverse. That is, given a string, one can decompose the string into its&#10;constituent parts that correspond to the parts of grammar used to generate it&#10;– the derivation tree of that string. These parts (and parts from other similar&#10;strings) can later be recombined using the same grammar to produce new strings.">
<polygon fill="white" stroke="black" points="365.5,-257 265.5,-257 265.5,-221 371.5,-221 371.5,-251 365.5,-257"/>
<polyline fill="none" stroke="black" points="365.5,-257 365.5,-251 "/>
<polyline fill="none" stroke="black" points="371.5,-251 365.5,-251 "/>
<text text-anchor="middle" x="318.5" y="-235.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Parsing Inputs</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Parser -->
<g id="edge18" class="edge">
<title>GrammarFuzzer&#45;&gt;Parser</title>
<path fill="none" stroke="black" d="M362.61,-293.83C355.54,-285.2 346.96,-274.73 339.26,-265.33"/>
<polygon fill="black" stroke="black" points="341.82,-262.93 332.77,-257.42 336.4,-267.37 341.82,-262.93"/>
</g>
<!-- GeneratorGrammarFuzzer -->
<g id="node19" class="node">
<title>GeneratorGrammarFuzzer</title>
<g id="a_node19"><a xlink:href="GeneratorGrammarFuzzer.ipynb" xlink:title="Fuzzing with Generators (GeneratorGrammarFuzzer)&#10;&#10;In this chapter, we show how to extend grammars with functions – pieces of code that get executed during grammar expansion, and that can generate, check, or change elements produced. &#160;Adding functions to a grammar allows for very versatile test generation, bringing together the best of grammar generation and programming.">
<polygon fill="white" stroke="black" points="91,-184 0,-184 0,-146 97,-146 97,-178 91,-184"/>
<polyline fill="none" stroke="black" points="91,-184 91,-178 "/>
<polyline fill="none" stroke="black" points="97,-178 91,-178 "/>
<text text-anchor="middle" x="48.5" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing with</text>
<text text-anchor="middle" x="48.5" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Generators</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;GeneratorGrammarFuzzer -->
<g id="edge19" class="edge">
<title>GrammarFuzzer&#45;&gt;GeneratorGrammarFuzzer</title>
<path fill="none" stroke="black" d="M312.2,-295.06C283.87,-286.22 250.96,-273.9 223.5,-258 201.14,-245.05 201.51,-233.54 179.5,-220 156.94,-206.12 130.19,-194.36 106.76,-185.4"/>
<polygon fill="black" stroke="black" points="107.87,-182.08 97.28,-181.85 105.42,-188.64 107.87,-182.08"/>
</g>
<!-- Reducer -->
<g id="node20" class="node">
<title>Reducer</title>
<g id="a_node20"><a xlink:href="Reducer.ipynb" xlink:title="Reducing Failure&#45;Inducing Inputs (Reducer)&#10;&#10;By construction, fuzzers create inputs that may be hard to read. &#160;This causes issues during debugging, when a human has to analyze the exact cause of the failure. &#160;In this chapter, we present techniques that automatically reduce and simplify failure&#45;inducing inputs to a minimum in order to ease debugging.">
<polygon fill="white" stroke="black" points="165,-258 46,-258 46,-220 171,-220 171,-252 165,-258"/>
<polyline fill="none" stroke="black" points="165,-258 165,-252 "/>
<polyline fill="none" stroke="black" points="171,-252 165,-252 "/>
<text text-anchor="middle" x="108.5" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Reducing Failure&#45;</text>
<text text-anchor="middle" x="108.5" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Inducing Inputs</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Reducer -->
<g id="edge20" class="edge">
<title>GrammarFuzzer&#45;&gt;Reducer</title>
<path fill="none" stroke="black" d="M312.38,-294.57C272.74,-283.96 222.01,-270.38 181.08,-259.43"/>
<polygon fill="black" stroke="black" points="181.73,-255.98 171.17,-256.77 179.92,-262.74 181.73,-255.98"/>
</g>
<!-- WebFuzzer -->
<g id="node21" class="node">
<title>WebFuzzer</title>
<g id="a_node21"><a xlink:href="WebFuzzer.ipynb" xlink:title="Testing Web Applications (WebFuzzer)&#10;&#10;In this chapter, we explore how to generate tests for Graphical User Interfaces (GUIs), notably on Web interfaces. &#160;We set up a (vulnerable) Web server and demonstrate how to systematically explore its behavior – first with hand&#45;written grammars, then with grammars automatically inferred from the user interface. &#160;We also show how to conduct systematic attacks on these servers, notably with code and SQL injection.">
<polygon fill="white" stroke="black" points="477,-258 390,-258 390,-220 483,-220 483,-252 477,-258"/>
<polyline fill="none" stroke="black" points="477,-258 477,-252 "/>
<polyline fill="none" stroke="black" points="483,-252 477,-252 "/>
<text text-anchor="middle" x="436.5" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Testing Web</text>
<text text-anchor="middle" x="436.5" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Applications</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;WebFuzzer -->
<g id="edge21" class="edge">
<title>GrammarFuzzer&#45;&gt;WebFuzzer</title>
<path fill="none" stroke="black" d="M392.39,-293.83C399.25,-285.45 407.53,-275.35 415.05,-266.17"/>
<polygon fill="black" stroke="black" points="417.78,-268.37 421.41,-258.41 412.37,-263.93 417.78,-268.37"/>
</g>
<!-- Parser&#45;&gt;ProbabilisticGrammarFuzzer -->
<g id="edge26" class="edge">
<title>Parser&#45;&gt;ProbabilisticGrammarFuzzer</title>
<path fill="none" stroke="black" d="M285.32,-220.94C266.67,-211.34 243.14,-199.24 222.92,-188.84"/>
<polygon fill="black" stroke="black" points="224.38,-185.66 213.89,-184.2 221.18,-191.89 224.38,-185.66"/>
</g>
<!-- Parser&#45;&gt;GreyboxGrammarFuzzer -->
<g id="edge27" class="edge">
<title>Parser&#45;&gt;GreyboxGrammarFuzzer</title>
<path fill="none" stroke="black" d="M355.21,-221C374.51,-211.33 398.13,-198.3 417.5,-184 436.97,-169.63 435.42,-157.89 456.5,-146 493.32,-125.22 538.32,-112.25 576.95,-104.24"/>
<polygon fill="black" stroke="black" points="578.02,-107.6 587.14,-102.21 576.65,-100.73 578.02,-107.6"/>
</g>
<!-- InformationFlow -->
<g id="node26" class="node">
<title>InformationFlow</title>
<g id="a_node26"><a xlink:href="InformationFlow.ipynb" xlink:title="Tracking Information Flow (InformationFlow)&#10;&#10;We have explored how one could generate better inputs that can penetrate deeper into the program in question. While doing so, we have relied on program crashes to tell us that we have succeeded in finding problems in the program. However, that is rather simplistic. What if the behavior of the program is simply incorrect, but does not lead to a crash? Can one do better?">
<polygon fill="white" stroke="black" points="403,-184 260,-184 260,-146 409,-146 409,-178 403,-184"/>
<polyline fill="none" stroke="black" points="403,-184 403,-178 "/>
<polyline fill="none" stroke="black" points="409,-178 403,-178 "/>
<text text-anchor="middle" x="334.5" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Tracking Information</text>
<text text-anchor="middle" x="334.5" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Flow</text>
</a>
</g>
</g>
<!-- Parser&#45;&gt;InformationFlow -->
<g id="edge28" class="edge">
<title>Parser&#45;&gt;InformationFlow</title>
<path fill="none" stroke="black" d="M322.29,-220.94C324.08,-212.9 326.25,-203.1 328.27,-194.02"/>
<polygon fill="black" stroke="black" points="331.7,-194.72 330.46,-184.2 324.87,-193.2 331.7,-194.72"/>
</g>
<!-- GeneratorGrammarFuzzer&#45;&gt;APIFuzzer -->
<g id="edge30" class="edge">
<title>GeneratorGrammarFuzzer&#45;&gt;APIFuzzer</title>
<path fill="none" stroke="black" d="M81.3,-145.83C98.68,-136.21 120.16,-124.31 138.5,-114.15"/>
<polygon fill="black" stroke="black" points="140.44,-117.08 147.5,-109.17 137.05,-110.95 140.44,-117.08"/>
</g>
<!-- WebFuzzer&#45;&gt;GUIFuzzer -->
<g id="edge34" class="edge">
<title>WebFuzzer&#45;&gt;GUIFuzzer</title>
<path fill="none" stroke="black" d="M459.46,-219.83C470.67,-210.96 484.32,-200.16 496.44,-190.57"/>
<polygon fill="black" stroke="black" points="498.87,-193.11 504.54,-184.16 494.53,-187.62 498.87,-193.11"/>
</g>
<!-- InformationFlow&#45;&gt;ConcolicFuzzer -->
<g id="edge32" class="edge">
<title>InformationFlow&#45;&gt;ConcolicFuzzer</title>
<path fill="none" stroke="black" d="M370.58,-145.83C389.96,-136.08 413.97,-123.99 434.33,-113.74"/>
<polygon fill="black" stroke="black" points="436.04,-116.79 443.4,-109.17 432.89,-110.54 436.04,-116.79"/>
</g>
<!-- InformationFlow&#45;&gt;GrammarMiner -->
<g id="edge31" class="edge">
<title>InformationFlow&#45;&gt;GrammarMiner</title>
<path fill="none" stroke="black" d="M336.52,-145.83C337.37,-138.13 338.39,-128.97 339.34,-120.42"/>
<polygon fill="black" stroke="black" points="342.83,-120.74 340.45,-110.41 335.87,-119.97 342.83,-120.74"/>
</g>
<!-- APIFuzzer&#45;&gt;Carver -->
<g id="edge33" class="edge">
<title>APIFuzzer&#45;&gt;Carver</title>
<path fill="none" stroke="black" d="M226.69,-78.67C274.84,-67.35 349.55,-49.79 405.47,-36.64"/>
<polygon fill="black" stroke="black" points="406.39,-40.02 415.33,-34.32 404.79,-33.2 406.39,-40.02"/>
</g>
</g>
</svg>
