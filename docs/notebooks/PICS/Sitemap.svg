<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 7.0.2 (20221119.0110)
 -->
<!-- Pages: 1 -->
<svg width="1325pt" height="577pt"
 viewBox="0.00 0.00 1324.95 577.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 573)">
<polygon fill="white" stroke="none" points="-4,4 -4,-573 1320.95,-573 1320.95,4 -4,4"/>
<!-- Fuzzer -->
<g id="node1" class="node">
<title>Fuzzer</title>
<g id="a_node1"><a xlink:href="Fuzzer.ipynb" xlink:title="Fuzzing: Breaking Things with Random Inputs (Fuzzer)&#10;&#10;In this chapter, we&#39;ll start with one of the simplest test generation techniques. &#160;The key idea of random text generation, also known as fuzzing, is to feed a string of random characters into a program in the hope to uncover failures.">
<polygon fill="white" stroke="black" points="900.95,-495 763.95,-495 763.95,-442 906.95,-442 906.95,-489 900.95,-495"/>
<polyline fill="none" stroke="black" points="900.95,-495 900.95,-489"/>
<polyline fill="none" stroke="black" points="906.95,-489 900.95,-489"/>
<text text-anchor="middle" x="835.45" y="-479.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing: Breaking</text>
<text text-anchor="middle" x="835.45" y="-464.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Things</text>
<text text-anchor="middle" x="835.45" y="-449.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">with Random Inputs</text>
</a>
</g>
</g>
<!-- Coverage -->
<g id="node2" class="node">
<title>Coverage</title>
<g id="a_node2"><a xlink:href="Coverage.ipynb" xlink:title="Code Coverage (Coverage)&#10;&#10;In the previous chapter, we introduced basic fuzzing – that is, generating random inputs to test programs. &#160;How do we measure the effectiveness of these tests? &#160;One way would be to check the number (and seriousness) of bugs found; but if bugs are scarce, we need a proxy for the likelihood of a test to uncover a bug. &#160;In this chapter, we introduce the concept of code coverage, measuring which parts of a program are actually executed during a test run. &#160;Measuring such coverage is also crucial for test generators that attempt to cover as much code as possible.">
<polygon fill="white" stroke="black" points="504.95,-331 403.95,-331 403.95,-295 510.95,-295 510.95,-325 504.95,-331"/>
<polyline fill="none" stroke="black" points="504.95,-331 504.95,-325"/>
<polyline fill="none" stroke="black" points="510.95,-325 504.95,-325"/>
<text text-anchor="middle" x="457.45" y="-309.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Code Coverage</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;Coverage -->
<g id="edge1" class="edge">
<title>Fuzzer&#45;&gt;Coverage</title>
<path fill="none" stroke="black" d="M763.58,-453.66C717.78,-443.51 657.81,-427.7 607.45,-406 564.73,-387.59 519.75,-358.53 490.32,-338"/>
<polygon fill="black" stroke="black" points="492.39,-335.18 482.2,-332.27 488.35,-340.89 492.39,-335.18"/>
</g>
<!-- SearchBasedFuzzer -->
<g id="node3" class="node">
<title>SearchBasedFuzzer</title>
<g id="a_node3"><a xlink:href="SearchBasedFuzzer.ipynb" xlink:title="Search&#45;Based Fuzzing (SearchBasedFuzzer)&#10;&#10;Sometimes we are not only interested in fuzzing as many as possible diverse program inputs, but in deriving specific test inputs that achieve some objective, such as reaching specific statements in a program. When we have an idea of what we are looking for, then we can search for it. Search algorithms are at the core of computer science, but applying classic search algorithms like breadth or depth first search to search for tests is unrealistic, because these algorithms potentially require us to look at all possible inputs. However, domain&#45;knowledge can be used to overcome this problem. For example, if we can estimate which of several program inputs is closer to the one we are looking for, then this information can guide us to reach the target quicker – this information is known as a heuristic. The way heuristics are applied systematically is captured in meta&#45;heuristic search algorithms. The &quot;meta&quot; denotes that these algorithms are generic and can be instantiated differently to different problems. Meta&#45;heuristics often take inspiration from processes observed in nature. For example, there are algorithms mimicking evolutionary processes, swarm intelligence, or chemical reactions. In general, they are much more efficient than exhaustive search approaches such that they can be applied to vast search spaces – search spaces as vast as the domain of program inputs are no problem for them.">
<polygon fill="white" stroke="black" points="762.45,-405 616.45,-405 616.45,-369 768.45,-369 768.45,-399 762.45,-405"/>
<polyline fill="none" stroke="black" points="762.45,-405 762.45,-399"/>
<polyline fill="none" stroke="black" points="768.45,-399 762.45,-399"/>
<text text-anchor="middle" x="692.45" y="-383.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Search&#45;Based Fuzzing</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;SearchBasedFuzzer -->
<g id="edge2" class="edge">
<title>Fuzzer&#45;&gt;SearchBasedFuzzer</title>
<path fill="none" stroke="black" d="M789.02,-441.69C771.16,-431.76 750.91,-420.5 733.58,-410.87"/>
<polygon fill="black" stroke="black" points="735.52,-407.94 725.08,-406.14 732.12,-414.06 735.52,-407.94"/>
</g>
<!-- Grammars -->
<g id="node4" class="node">
<title>Grammars</title>
<g id="a_node4"><a xlink:href="Grammars.ipynb" xlink:title="Fuzzing with Grammars (Grammars)&#10;&#10;In the chapter on &quot;Mutation&#45;Based Fuzzing&quot;, we have seen how to use extra hints – such as sample input files – to speed up test generation. &#160;In this chapter, we take this idea one step further, by providing a specification of the legal inputs to a program. &#160;Specifying inputs via a grammar allows for very systematic and efficient test generation, in particular for complex input formats. &#160;Grammars also serve as the base for configuration fuzzing, API fuzzing, GUI fuzzing, and many more.">
<polygon fill="white" stroke="black" points="877.95,-406 786.95,-406 786.95,-368 883.95,-368 883.95,-400 877.95,-406"/>
<polyline fill="none" stroke="black" points="877.95,-406 877.95,-400"/>
<polyline fill="none" stroke="black" points="883.95,-400 877.95,-400"/>
<text text-anchor="middle" x="835.45" y="-390.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing with</text>
<text text-anchor="middle" x="835.45" y="-375.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammars</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;Grammars -->
<g id="edge3" class="edge">
<title>Fuzzer&#45;&gt;Grammars</title>
<path fill="none" stroke="black" d="M835.45,-441.91C835.45,-434.25 835.45,-425.79 835.45,-417.88"/>
<polygon fill="black" stroke="black" points="838.95,-418 835.45,-408 831.95,-418 838.95,-418"/>
</g>
<!-- SymbolicFuzzer -->
<g id="node5" class="node">
<title>SymbolicFuzzer</title>
<g id="a_node5"><a xlink:href="SymbolicFuzzer.ipynb" xlink:title="Symbolic Fuzzing (SymbolicFuzzer)&#10;&#10;One of the problems with traditional methods of fuzzing is that they fail to exercise all the possible behaviors that a system can have, especially when the input space is large. Quite often the execution of a specific branch of execution may happen only with very specific inputs, which could represent a minimal fraction of the input space. The traditional fuzzing methods relies on chance to produce inputs they need. However, relying on randomness to generate values that we want is a bad idea when the space to be explored is huge. For example, a function that accepts a string, even if one only considers the first $10$ characters, already has $2^{80}$ possible inputs. If one is looking for a specific string, random generation of values will take a few thousand years even in one of the super computers.">
<polygon fill="white" stroke="black" points="1020.95,-405 901.95,-405 901.95,-369 1026.95,-369 1026.95,-399 1020.95,-405"/>
<polyline fill="none" stroke="black" points="1020.95,-405 1020.95,-399"/>
<polyline fill="none" stroke="black" points="1026.95,-399 1020.95,-399"/>
<text text-anchor="middle" x="964.45" y="-383.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Symbolic Fuzzing</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;SymbolicFuzzer -->
<g id="edge4" class="edge">
<title>Fuzzer&#45;&gt;SymbolicFuzzer</title>
<path fill="none" stroke="black" d="M877.33,-441.69C893.14,-431.94 911.03,-420.92 926.47,-411.41"/>
<polygon fill="black" stroke="black" points="928.24,-414.42 934.92,-406.2 924.57,-408.47 928.24,-414.42"/>
</g>
<!-- FuzzingInTheLarge -->
<g id="node6" class="node">
<title>FuzzingInTheLarge</title>
<g id="a_node6"><a xlink:href="FuzzingInTheLarge.ipynb" xlink:title="Fuzzing in the Large (FuzzingInTheLarge)&#10;&#10;In the past chapters, we have always looked at fuzzing taking place on one machine for a few seconds only. &#160;In the real world, however, fuzzers are run on dozens or even thousands of machines; for hours, days and weeks; for one program or dozens of programs. &#160;In such contexts, one needs an infrastructure to collect failure data from the individual fuzzer runs, and to aggregate such data in a central repository. &#160;In this chapter, we will examine such an infrastructure, the FuzzManager framework from Mozilla.">
<polygon fill="white" stroke="black" points="1179.45,-405 1045.45,-405 1045.45,-369 1185.45,-369 1185.45,-399 1179.45,-405"/>
<polyline fill="none" stroke="black" points="1179.45,-405 1179.45,-399"/>
<polyline fill="none" stroke="black" points="1185.45,-399 1179.45,-399"/>
<text text-anchor="middle" x="1115.45" y="-383.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing in the Large</text>
</a>
</g>
</g>
<!-- Fuzzer&#45;&gt;FuzzingInTheLarge -->
<g id="edge5" class="edge">
<title>Fuzzer&#45;&gt;FuzzingInTheLarge</title>
<path fill="none" stroke="black" d="M907.19,-447.13C948.84,-435.31 1001.16,-420.45 1042.94,-408.59"/>
<polygon fill="black" stroke="black" points="1043.75,-412 1052.41,-405.9 1041.84,-405.26 1043.75,-412"/>
</g>
<!-- MutationFuzzer -->
<g id="node8" class="node">
<title>MutationFuzzer</title>
<g id="a_node8"><a xlink:href="MutationFuzzer.ipynb" xlink:title="Mutation&#45;Based Fuzzing (MutationFuzzer)&#10;&#10;Most randomly generated inputs are syntactically invalid and thus are quickly rejected by the processing program. &#160;To exercise functionality beyond input processing, we must increase chances to obtain valid inputs. &#160;One such way is so&#45;called mutational fuzzing – that is, introducing small changes to existing inputs that may still keep the input valid, yet exercise new behavior. &#160;We show how to create such mutations, and how to guide them towards yet uncovered code, applying central concepts from the popular AFL fuzzer.">
<polygon fill="white" stroke="black" points="587.45,-258 475.45,-258 475.45,-220 593.45,-220 593.45,-252 587.45,-258"/>
<polyline fill="none" stroke="black" points="587.45,-258 587.45,-252"/>
<polyline fill="none" stroke="black" points="593.45,-252 587.45,-252"/>
<text text-anchor="middle" x="534.45" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Mutation&#45;Based</text>
<text text-anchor="middle" x="534.45" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;MutationFuzzer -->
<g id="edge7" class="edge">
<title>Coverage&#45;&gt;MutationFuzzer</title>
<path fill="none" stroke="black" d="M476.09,-294.57C485.27,-285.99 496.52,-275.46 506.69,-265.96"/>
<polygon fill="black" stroke="black" points="508.89,-268.69 513.8,-259.31 504.11,-263.58 508.89,-268.69"/>
</g>
<!-- MutationAnalysis -->
<g id="node9" class="node">
<title>MutationAnalysis</title>
<g id="a_node9"><a xlink:href="MutationAnalysis.ipynb" xlink:title="Mutation Analysis (MutationAnalysis)&#10;&#10;In the chapter on coverage, we showed how one can identify which parts of the program are executed by a program, and hence get a sense of the effectiveness of a set of test cases in covering the program structure. &#160;However, coverage alone may not be the best measure for the effectiveness of a test, as one can have great coverage without ever checking a result for correctness. &#160;In this chapter, we introduce another means for assessing the effectiveness of a test suite: After injecting mutations – artificial faults – into the code, we check whether a test suite can detect these artificial faults. &#160;The idea is that if it fails to detect such mutations, it will also miss real bugs.">
<polygon fill="white" stroke="black" points="141.45,-257 17.45,-257 17.45,-221 147.45,-221 147.45,-251 141.45,-257"/>
<polyline fill="none" stroke="black" points="141.45,-257 141.45,-251"/>
<polyline fill="none" stroke="black" points="147.45,-251 141.45,-251"/>
<text text-anchor="middle" x="82.45" y="-235.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Mutation Analysis</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;MutationAnalysis -->
<g id="edge8" class="edge">
<title>Coverage&#45;&gt;MutationAnalysis</title>
<path fill="none" stroke="black" d="M403.7,-303.38C345.7,-293.84 250.36,-277.52 158.9,-258.46"/>
<polygon fill="black" stroke="black" points="159.76,-255.06 149.25,-256.43 158.32,-261.91 159.76,-255.06"/>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node10" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node10"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="Grammar Coverage (GrammarCoverageFuzzer)&#10;&#10;Producing inputs from grammars gives all possible expansions of a rule the same likelihood. &#160;For producing a comprehensive test suite, however, it makes more sense to maximize variety – for instance, by not repeating the same expansions over and over again. &#160;In this chapter, we explore how to systematically cover elements of a grammar such that we maximize variety and do not miss out individual elements.">
<polygon fill="white" stroke="black" points="941.45,-257 811.45,-257 811.45,-221 947.45,-221 947.45,-251 941.45,-257"/>
<polyline fill="none" stroke="black" points="941.45,-257 941.45,-251"/>
<polyline fill="none" stroke="black" points="947.45,-251 941.45,-251"/>
<text text-anchor="middle" x="879.45" y="-235.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammar Coverage</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge9" class="edge">
<title>Coverage&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M511.45,-304.82C577.28,-295.78 692.15,-279.1 799.99,-258.41"/>
<polygon fill="black" stroke="black" points="800.44,-261.89 809.59,-256.55 799.1,-255.01 800.44,-261.89"/>
</g>
<!-- ProbabilisticGrammarFuzzer -->
<g id="node11" class="node">
<title>ProbabilisticGrammarFuzzer</title>
<g id="a_node11"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="Probabilistic Grammar Fuzzing (ProbabilisticGrammarFuzzer)&#10;&#10;Let us give grammars even more power by assigning probabilities to individual expansions. &#160;This allows us to control how many of each element should be produced, and thus allows us to target our generated tests towards specific functionality. &#160;We also show how to learn such probabilities from given sample inputs, and specifically direct our tests towards input features that are uncommon in these samples.">
<polygon fill="white" stroke="black" points="486.95,-184 365.95,-184 365.95,-146 492.95,-146 492.95,-178 486.95,-184"/>
<polyline fill="none" stroke="black" points="486.95,-184 486.95,-178"/>
<polyline fill="none" stroke="black" points="492.95,-178 486.95,-178"/>
<text text-anchor="middle" x="429.45" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Probabilistic</text>
<text text-anchor="middle" x="429.45" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammar Fuzzing</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;ProbabilisticGrammarFuzzer -->
<g id="edge10" class="edge">
<title>Coverage&#45;&gt;ProbabilisticGrammarFuzzer</title>
<path fill="none" stroke="black" d="M403.58,-309.46C290.02,-303.56 34.3,-287.15 8.45,-258 -2.76,-245.36 -2.86,-232.54 8.45,-220 58.38,-164.63 262.15,-194.62 354.28,-183.92"/>
<polygon fill="black" stroke="black" points="354.56,-187.41 363.96,-182.53 353.57,-180.48 354.56,-187.41"/>
</g>
<!-- ConcolicFuzzer -->
<g id="node12" class="node">
<title>ConcolicFuzzer</title>
<g id="a_node12"><a xlink:href="ConcolicFuzzer.ipynb" xlink:title="Concolic Fuzzing (ConcolicFuzzer)&#10;&#10;In the chapter on information flow, we have seen how one can use dynamic taints to produce more intelligent test cases than simply looking for program crashes. We have also seen how one can use the taints to update the grammar, and hence focus more on the dangerous methods.">
<polygon fill="white" stroke="black" points="816.95,-109 703.95,-109 703.95,-73 822.95,-73 822.95,-103 816.95,-109"/>
<polyline fill="none" stroke="black" points="816.95,-109 816.95,-103"/>
<polyline fill="none" stroke="black" points="822.95,-103 816.95,-103"/>
<text text-anchor="middle" x="763.45" y="-87.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Concolic Fuzzing</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;ConcolicFuzzer -->
<g id="edge11" class="edge">
<title>Coverage&#45;&gt;ConcolicFuzzer</title>
<path fill="none" stroke="black" d="M511.45,-298.16C539.95,-289.35 574.68,-276.14 602.45,-258 633.69,-237.6 704.43,-159.32 740.85,-117.96"/>
<polygon fill="black" stroke="black" points="743.32,-120.45 747.29,-110.63 738.06,-115.83 743.32,-120.45"/>
</g>
<!-- DynamicInvariants -->
<g id="node13" class="node">
<title>DynamicInvariants</title>
<g id="a_node13"><a xlink:href="DynamicInvariants.ipynb" xlink:title="Mining Function Specifications (DynamicInvariants)&#10;&#10;When testing a program, one not only needs to cover its several behaviors; one also needs to check whether the result is as expected. &#160;In this chapter, we introduce a technique that allows us to mine function specifications from a set of given executions, resulting in abstract and formal descriptions of what the function expects and what it delivers.">
<polygon fill="white" stroke="black" points="278.95,-258 165.95,-258 165.95,-220 284.95,-220 284.95,-252 278.95,-258"/>
<polyline fill="none" stroke="black" points="278.95,-258 278.95,-252"/>
<polyline fill="none" stroke="black" points="284.95,-252 278.95,-252"/>
<text text-anchor="middle" x="225.45" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Mining Function</text>
<text text-anchor="middle" x="225.45" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Specifications</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;DynamicInvariants -->
<g id="edge12" class="edge">
<title>Coverage&#45;&gt;DynamicInvariants</title>
<path fill="none" stroke="black" d="M403.64,-295.3C371.37,-285.29 329.99,-272.44 295.23,-261.65"/>
<polygon fill="black" stroke="black" points="296.7,-258.45 286.12,-258.83 294.63,-265.13 296.7,-258.45"/>
</g>
<!-- WhenToStopFuzzing -->
<g id="node14" class="node">
<title>WhenToStopFuzzing</title>
<g id="a_node14"><a xlink:href="WhenToStopFuzzing.ipynb" xlink:title="When To Stop Fuzzing (WhenToStopFuzzing)&#10;&#10;In the past chapters, we have discussed several fuzzing techniques. &#160;Knowing what to do is important, but it is also important to know when to stop doing things. &#160;In this chapter, we will learn when to stop fuzzing – and use a prominent example for this purpose: The Enigma machine that was used in the second world war by the navy of Nazi Germany to encrypt communications, and how Alan Turing and I.J. Good used fuzzing techniques to crack ciphers for the Naval Enigma machine.">
<polygon fill="white" stroke="black" points="451.45,-257 303.45,-257 303.45,-221 457.45,-221 457.45,-251 451.45,-257"/>
<polyline fill="none" stroke="black" points="451.45,-257 451.45,-251"/>
<polyline fill="none" stroke="black" points="457.45,-251 451.45,-251"/>
<text text-anchor="middle" x="380.45" y="-235.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">When To Stop Fuzzing</text>
</a>
</g>
</g>
<!-- Coverage&#45;&gt;WhenToStopFuzzing -->
<g id="edge13" class="edge">
<title>Coverage&#45;&gt;WhenToStopFuzzing</title>
<path fill="none" stroke="black" d="M438.81,-294.57C429.35,-285.73 417.69,-274.82 407.29,-265.09"/>
<polygon fill="black" stroke="black" points="409.72,-262.58 400.02,-258.3 404.94,-267.69 409.72,-262.58"/>
</g>
<!-- GrammarFuzzer -->
<g id="node17" class="node">
<title>GrammarFuzzer</title>
<g id="a_node17"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="Efficient Grammar Fuzzing (GrammarFuzzer)&#10;&#10;In the chapter on grammars, we have seen how to use grammars for very effective and efficient testing. &#160;In this chapter, we refine the previous string&#45;based algorithm into a tree&#45;based algorithm, which is much faster and allows for much more control over the production of fuzz inputs.">
<polygon fill="white" stroke="black" points="938.45,-332 814.45,-332 814.45,-294 944.45,-294 944.45,-326 938.45,-332"/>
<polyline fill="none" stroke="black" points="938.45,-332 938.45,-326"/>
<polyline fill="none" stroke="black" points="944.45,-326 938.45,-326"/>
<text text-anchor="middle" x="879.45" y="-316.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Efficient Grammar</text>
<text text-anchor="middle" x="879.45" y="-301.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing</text>
</a>
</g>
</g>
<!-- Grammars&#45;&gt;GrammarFuzzer -->
<g id="edge16" class="edge">
<title>Grammars&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M846.55,-367.83C851.31,-360.05 856.98,-350.77 862.26,-342.13"/>
<polygon fill="black" stroke="black" points="865.18,-344.06 867.41,-333.7 859.21,-340.41 865.18,-344.06"/>
</g>
<!-- Intro_Testing -->
<g id="node7" class="node">
<title>Intro_Testing</title>
<g id="a_node7"><a xlink:href="Intro_Testing.ipynb" xlink:title="Introduction to Software Testing (Intro_Testing)&#10;&#10;Before we get to the central parts of the book, let us introduce essential concepts of software testing. &#160;Why is it necessary to test software at all? &#160;How does one test software? &#160;How can one tell whether a test has been successful? &#160;How does one know if one has tested enough? &#160;In this chapter, let us recall the most important concepts, and at the same time get acquainted with Python and interactive notebooks.">
<polygon fill="white" stroke="black" points="890.45,-569 774.45,-569 774.45,-531 896.45,-531 896.45,-563 890.45,-569"/>
<polyline fill="none" stroke="black" points="890.45,-569 890.45,-563"/>
<polyline fill="none" stroke="black" points="896.45,-563 890.45,-563"/>
<text text-anchor="middle" x="835.45" y="-553.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Introduction to</text>
<text text-anchor="middle" x="835.45" y="-538.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Software Testing</text>
</a>
</g>
</g>
<!-- Intro_Testing&#45;&gt;Fuzzer -->
<g id="edge6" class="edge">
<title>Intro_Testing&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M835.45,-530.56C835.45,-523.45 835.45,-515.05 835.45,-506.8"/>
<polygon fill="black" stroke="black" points="838.95,-506.88 835.45,-496.88 831.95,-506.88 838.95,-506.88"/>
</g>
<!-- GreyboxFuzzer -->
<g id="node15" class="node">
<title>GreyboxFuzzer</title>
<g id="a_node15"><a xlink:href="GreyboxFuzzer.ipynb" xlink:title="Greybox Fuzzing (GreyboxFuzzer)&#10;&#10;In the previous chapter, we have introduced mutation&#45;based fuzzing, a technique that generates fuzz inputs by applying small mutations to given inputs. In this chapter, we show how to guide these mutations towards specific goals such as coverage. The algorithms in this chapter stem from the popular American Fuzzy Lop (AFL) fuzzer, in particular from its AFLFast and AFLGo flavors. We will explore the greybox fuzzing algorithm behind AFL and how we can exploit it to solve various problems for automated vulnerability detection.">
<polygon fill="white" stroke="black" points="625.45,-183 511.45,-183 511.45,-147 631.45,-147 631.45,-177 625.45,-183"/>
<polyline fill="none" stroke="black" points="625.45,-183 625.45,-177"/>
<polyline fill="none" stroke="black" points="631.45,-177 625.45,-177"/>
<text text-anchor="middle" x="571.45" y="-161.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Greybox Fuzzing</text>
</a>
</g>
</g>
<!-- MutationFuzzer&#45;&gt;GreyboxFuzzer -->
<g id="edge14" class="edge">
<title>MutationFuzzer&#45;&gt;GreyboxFuzzer</title>
<path fill="none" stroke="black" d="M543.79,-219.83C547.87,-211.89 552.74,-202.41 557.25,-193.63"/>
<polygon fill="black" stroke="black" points="560.35,-195.26 561.81,-184.76 554.12,-192.06 560.35,-195.26"/>
</g>
<!-- GrammarMiner -->
<g id="node23" class="node">
<title>GrammarMiner</title>
<g id="a_node23"><a xlink:href="GrammarMiner.ipynb" xlink:title="Mining Input Grammars (GrammarMiner)&#10;&#10;So far, the grammars we have seen have been mostly specified manually – that is, you (or the person knowing the input format) had to design and write a grammar in the first place. &#160;While the grammars we have seen so far have been rather simple, creating a grammar for complex inputs can involve quite some effort. &#160;In this chapter, we therefore introduce techniques that automatically mine grammars from programs – by executing the programs and observing how they process which parts of the input. &#160;In conjunction with a grammar fuzzer, this allows us to &#10;1. take a program, &#10;2. extract its input grammar, and &#10;3. fuzz it with high efficiency and effectiveness, using the concepts in this book.">
<polygon fill="white" stroke="black" points="984.45,-110 892.45,-110 892.45,-72 990.45,-72 990.45,-104 984.45,-110"/>
<polyline fill="none" stroke="black" points="984.45,-110 984.45,-104"/>
<polyline fill="none" stroke="black" points="990.45,-104 984.45,-104"/>
<text text-anchor="middle" x="941.45" y="-94.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Mining Input</text>
<text text-anchor="middle" x="941.45" y="-79.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammars</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;GrammarMiner -->
<g id="edge23" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;GrammarMiner</title>
<path fill="none" stroke="black" d="M939.91,-220.51C970.39,-210.34 1002.72,-197 1011.45,-184 1020.86,-169.98 1018.9,-161.16 1011.45,-146 1005.85,-134.61 996.57,-124.94 986.56,-117.08"/>
<polygon fill="black" stroke="black" points="988.64,-114.26 978.48,-111.25 984.54,-119.94 988.64,-114.26"/>
</g>
<!-- ConfigurationFuzzer -->
<g id="node24" class="node">
<title>ConfigurationFuzzer</title>
<g id="a_node24"><a xlink:href="ConfigurationFuzzer.ipynb" xlink:title="Testing Configurations (ConfigurationFuzzer)&#10;&#10;The behavior of a program is not only governed by its data. &#160;The configuration of a program – that is, the settings that govern the execution of a program on its (regular) input data, as set by options or configuration files – just as well influences behavior, and thus can and should be tested. &#160;In this chapter, we explore how to systematically test and cover software configurations. &#160;By automatically inferring configuration options, we can apply these techniques out of the box, with no need for writing a grammar. &#160;Finally, we show how to systematically cover combinations of configuration options, quickly detecting unwanted interferences.">
<polygon fill="white" stroke="black" points="995.95,-184 892.95,-184 892.95,-146 1001.95,-146 1001.95,-178 995.95,-184"/>
<polyline fill="none" stroke="black" points="995.95,-184 995.95,-178"/>
<polyline fill="none" stroke="black" points="1001.95,-178 995.95,-178"/>
<text text-anchor="middle" x="947.45" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Testing</text>
<text text-anchor="middle" x="947.45" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Configurations</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;ConfigurationFuzzer -->
<g id="edge24" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;ConfigurationFuzzer</title>
<path fill="none" stroke="black" d="M895.91,-220.57C903.86,-212.16 913.56,-201.88 922.4,-192.53"/>
<polygon fill="black" stroke="black" points="924.83,-195.05 929.15,-185.37 919.74,-190.24 924.83,-195.05"/>
</g>
<!-- Carver -->
<g id="node25" class="node">
<title>Carver</title>
<g id="a_node25"><a xlink:href="Carver.ipynb" xlink:title="Carving Unit Tests (Carver)&#10;&#10;So far, we have always generated system input, i.e. data that the program as a whole obtains via its input channels. &#160;If we are interested in testing only a small set of functions, having to go through the system can be very inefficient. &#160;This chapter introduces a technique known as carving, which, given a system test, automatically extracts a set of unit tests that replicate the calls seen during the system test. &#160;The key idea is to record such calls such that we can replay them later – as a whole or selectively. &#160;On top, we also explore how to synthesize API grammars from carved unit tests; this means that we can synthesize API tests without having to write a grammar at all.">
<polygon fill="white" stroke="black" points="807.45,-36 683.45,-36 683.45,0 813.45,0 813.45,-30 807.45,-36"/>
<polyline fill="none" stroke="black" points="807.45,-36 807.45,-30"/>
<polyline fill="none" stroke="black" points="813.45,-30 807.45,-30"/>
<text text-anchor="middle" x="748.45" y="-14.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Carving Unit Tests</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;Carver -->
<g id="edge25" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;Carver</title>
<path fill="none" stroke="black" d="M947.59,-221.46C981.96,-211.6 1018.46,-198.25 1028.45,-184 1050.21,-152.97 1000.13,-72.57 999.45,-72 973.44,-49.97 888.81,-35.34 824.95,-27.13"/>
<polygon fill="black" stroke="black" points="825.55,-23.68 815.19,-25.91 824.68,-30.63 825.55,-23.68"/>
</g>
<!-- GUIFuzzer -->
<g id="node26" class="node">
<title>GUIFuzzer</title>
<g id="a_node26"><a xlink:href="GUIFuzzer.ipynb" xlink:title="Testing Graphical User Interfaces (GUIFuzzer)&#10;&#10;In this chapter, we explore how to generate tests for Graphical User Interfaces (GUIs), abstracting from our previous examples on Web testing. &#160;Building on general means to extract user interface elements and activate them, our techniques generalize to arbitrary graphical user interfaces, from rich Web applications to mobile apps, and systematically explore user interfaces through forms and navigation elements.">
<polygon fill="white" stroke="black" points="1270.45,-184 1152.45,-184 1152.45,-146 1276.45,-146 1276.45,-178 1270.45,-184"/>
<polyline fill="none" stroke="black" points="1270.45,-184 1270.45,-178"/>
<polyline fill="none" stroke="black" points="1276.45,-178 1270.45,-178"/>
<text text-anchor="middle" x="1214.45" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Testing Graphical</text>
<text text-anchor="middle" x="1214.45" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">User Interfaces</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;GUIFuzzer -->
<g id="edge26" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;GUIFuzzer</title>
<path fill="none" stroke="black" d="M947.87,-221.92C950.76,-221.27 953.64,-220.62 956.45,-220 1018.58,-206.24 1089.33,-191.5 1141.01,-180.9"/>
<polygon fill="black" stroke="black" points="1141.49,-184.37 1150.58,-178.94 1140.08,-177.51 1141.49,-184.37"/>
</g>
<!-- APIFuzzer -->
<g id="node28" class="node">
<title>APIFuzzer</title>
<g id="a_node28"><a xlink:href="APIFuzzer.ipynb" xlink:title="Fuzzing APIs (APIFuzzer)&#10;&#10;So far, we have always generated system input, i.e. data that the program as a whole obtains via its input channels. &#160;However, we can also generate inputs that go directly into individual functions, gaining flexibility and speed in the process. &#160;In this chapter, we explore the use of grammars to synthesize code for function calls, which allows you to generate program code that very efficiently invokes functions directly.">
<polygon fill="white" stroke="black" points="471.45,-109 381.45,-109 381.45,-73 477.45,-73 477.45,-103 471.45,-109"/>
<polyline fill="none" stroke="black" points="471.45,-109 471.45,-103"/>
<polyline fill="none" stroke="black" points="477.45,-103 471.45,-103"/>
<text text-anchor="middle" x="429.45" y="-87.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing APIs</text>
</a>
</g>
</g>
<!-- ProbabilisticGrammarFuzzer&#45;&gt;APIFuzzer -->
<g id="edge30" class="edge">
<title>ProbabilisticGrammarFuzzer&#45;&gt;APIFuzzer</title>
<path fill="none" stroke="black" d="M429.45,-145.83C429.45,-138.24 429.45,-129.24 429.45,-120.79"/>
<polygon fill="black" stroke="black" points="432.95,-120.93 429.45,-110.93 425.95,-120.93 432.95,-120.93"/>
</g>
<!-- GreyboxGrammarFuzzer -->
<g id="node16" class="node">
<title>GreyboxGrammarFuzzer</title>
<g id="a_node16"><a xlink:href="GreyboxGrammarFuzzer.ipynb" xlink:title="Greybox Fuzzing with Grammars (GreyboxGrammarFuzzer)&#10;&#10;In this chapter, we introduce important extensions to our syntactic fuzzing techniques, all leveraging syntactic parts of existing inputs.">
<polygon fill="white" stroke="black" points="660.45,-110 514.45,-110 514.45,-72 666.45,-72 666.45,-104 660.45,-110"/>
<polyline fill="none" stroke="black" points="660.45,-110 660.45,-104"/>
<polyline fill="none" stroke="black" points="666.45,-104 660.45,-104"/>
<text text-anchor="middle" x="590.45" y="-94.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Greybox Fuzzing with</text>
<text text-anchor="middle" x="590.45" y="-79.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Grammars</text>
</a>
</g>
</g>
<!-- GreyboxFuzzer&#45;&gt;GreyboxGrammarFuzzer -->
<g id="edge15" class="edge">
<title>GreyboxFuzzer&#45;&gt;GreyboxGrammarFuzzer</title>
<path fill="none" stroke="black" d="M576.05,-146.57C578.07,-138.93 580.49,-129.76 582.76,-121.13"/>
<polygon fill="black" stroke="black" points="586.07,-122.3 585.24,-111.74 579.31,-120.51 586.07,-122.3"/>
</g>
<!-- GrammarFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge17" class="edge">
<title>GrammarFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M879.45,-293.83C879.45,-286.24 879.45,-277.24 879.45,-268.79"/>
<polygon fill="black" stroke="black" points="882.95,-268.93 879.45,-258.93 875.95,-268.93 882.95,-268.93"/>
</g>
<!-- Parser -->
<g id="node18" class="node">
<title>Parser</title>
<g id="a_node18"><a xlink:href="Parser.ipynb" xlink:title="Parsing Inputs (Parser)&#10;&#10;In the chapter on Grammars, we discussed how grammars can be&#10;used to represent various languages. We also saw how grammars can be used to&#10;generate strings of the corresponding language. Grammars can also perform the&#10;reverse. That is, given a string, one can decompose the string into its&#10;constituent parts that correspond to the parts of grammar used to generate it&#10;– the derivation tree of that string. These parts (and parts from other similar&#10;strings) can later be recombined using the same grammar to produce new strings.">
<polygon fill="white" stroke="black" points="787.45,-257 687.45,-257 687.45,-221 793.45,-221 793.45,-251 787.45,-257"/>
<polyline fill="none" stroke="black" points="787.45,-257 787.45,-251"/>
<polyline fill="none" stroke="black" points="793.45,-251 787.45,-251"/>
<text text-anchor="middle" x="740.45" y="-235.3" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Parsing Inputs</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Parser -->
<g id="edge18" class="edge">
<title>GrammarFuzzer&#45;&gt;Parser</title>
<path fill="none" stroke="black" d="M844.02,-293.65C825.74,-284.18 803.3,-272.55 783.98,-262.55"/>
<polygon fill="black" stroke="black" points="785.74,-259.52 775.25,-258.03 782.52,-265.73 785.74,-259.52"/>
</g>
<!-- GeneratorGrammarFuzzer -->
<g id="node19" class="node">
<title>GeneratorGrammarFuzzer</title>
<g id="a_node19"><a xlink:href="GeneratorGrammarFuzzer.ipynb" xlink:title="Fuzzing with Generators (GeneratorGrammarFuzzer)&#10;&#10;In this chapter, we show how to extend grammars with functions – pieces of code that get executed during grammar expansion, and that can generate, check, or change elements produced. &#160;Adding functions to a grammar allows for very versatile test generation, bringing together the best of grammar generation and programming.">
<polygon fill="white" stroke="black" points="341.95,-184 250.95,-184 250.95,-146 347.95,-146 347.95,-178 341.95,-184"/>
<polyline fill="none" stroke="black" points="341.95,-184 341.95,-178"/>
<polyline fill="none" stroke="black" points="347.95,-178 341.95,-178"/>
<text text-anchor="middle" x="299.45" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing with</text>
<text text-anchor="middle" x="299.45" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Generators</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;GeneratorGrammarFuzzer -->
<g id="edge19" class="edge">
<title>GrammarFuzzer&#45;&gt;GeneratorGrammarFuzzer</title>
<path fill="none" stroke="black" d="M814.13,-297.97C774.3,-288.56 722.7,-274.81 678.45,-258 643.15,-244.59 638.48,-231.32 602.45,-220 500.43,-187.94 466.34,-207.37 359.37,-184.45"/>
<polygon fill="black" stroke="black" points="360.44,-181.1 349.92,-182.35 358.92,-187.94 360.44,-181.1"/>
</g>
<!-- Reducer -->
<g id="node20" class="node">
<title>Reducer</title>
<g id="a_node20"><a xlink:href="Reducer.ipynb" xlink:title="Reducing Failure&#45;Inducing Inputs (Reducer)&#10;&#10;By construction, fuzzers create inputs that may be hard to read. &#160;This causes issues during debugging, when a human has to analyze the exact cause of the failure. &#160;In this chapter, we present techniques that automatically reduce and simplify failure&#45;inducing inputs to a minimum in order to ease debugging.">
<polygon fill="white" stroke="black" points="1084.95,-258 965.95,-258 965.95,-220 1090.95,-220 1090.95,-252 1084.95,-258"/>
<polyline fill="none" stroke="black" points="1084.95,-258 1084.95,-252"/>
<polyline fill="none" stroke="black" points="1090.95,-252 1084.95,-252"/>
<text text-anchor="middle" x="1028.45" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Reducing Failure&#45;</text>
<text text-anchor="middle" x="1028.45" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Inducing Inputs</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Reducer -->
<g id="edge20" class="edge">
<title>GrammarFuzzer&#45;&gt;Reducer</title>
<path fill="none" stroke="black" d="M917.44,-293.65C936.45,-284.46 959.68,-273.23 979.97,-263.43"/>
<polygon fill="black" stroke="black" points="981.43,-266.61 988.91,-259.1 978.39,-260.3 981.43,-266.61"/>
</g>
<!-- FuzzingWithConstraints -->
<g id="node21" class="node">
<title>FuzzingWithConstraints</title>
<g id="a_node21"><a xlink:href="FuzzingWithConstraints.ipynb" xlink:title="Fuzzing with Constraints (FuzzingWithConstraints)&#10;&#10;In previous chapters, we have seen how Grammar&#45;Based Fuzzing allows us to efficiently generate myriads of syntactically valid inputs.&#10;However, there are semantic input features that cannot be expressed in a context&#45;free grammar, such as">
<polygon fill="white" stroke="black" points="1199.95,-258 1108.95,-258 1108.95,-220 1205.95,-220 1205.95,-252 1199.95,-258"/>
<polyline fill="none" stroke="black" points="1199.95,-258 1199.95,-252"/>
<polyline fill="none" stroke="black" points="1205.95,-252 1199.95,-252"/>
<text text-anchor="middle" x="1157.45" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Fuzzing with</text>
<text text-anchor="middle" x="1157.45" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Constraints</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;FuzzingWithConstraints -->
<g id="edge21" class="edge">
<title>GrammarFuzzer&#45;&gt;FuzzingWithConstraints</title>
<path fill="none" stroke="black" d="M944.54,-297.29C986.04,-287.64 1041.18,-274.31 1097.74,-258.68"/>
<polygon fill="black" stroke="black" points="1098.54,-262.09 1107.24,-256.04 1096.67,-255.35 1098.54,-262.09"/>
</g>
<!-- WebFuzzer -->
<g id="node22" class="node">
<title>WebFuzzer</title>
<g id="a_node22"><a xlink:href="WebFuzzer.ipynb" xlink:title="Testing Web Applications (WebFuzzer)&#10;&#10;In this chapter, we explore how to generate tests for Graphical User Interfaces (GUIs), notably on Web interfaces. &#160;We set up a (vulnerable) Web server and demonstrate how to systematically explore its behavior – first with handwritten grammars, then with grammars automatically inferred from the user interface. &#160;We also show how to conduct systematic attacks on these servers, notably with code and SQL injection.">
<polygon fill="white" stroke="black" points="1310.95,-258 1223.95,-258 1223.95,-220 1316.95,-220 1316.95,-252 1310.95,-258"/>
<polyline fill="none" stroke="black" points="1310.95,-258 1310.95,-252"/>
<polyline fill="none" stroke="black" points="1316.95,-252 1310.95,-252"/>
<text text-anchor="middle" x="1270.45" y="-242.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Testing Web</text>
<text text-anchor="middle" x="1270.45" y="-227.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Applications</text>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;WebFuzzer -->
<g id="edge22" class="edge">
<title>GrammarFuzzer&#45;&gt;WebFuzzer</title>
<path fill="none" stroke="black" d="M944.78,-304.59C1010.46,-296.44 1114.71,-281.63 1212.52,-258.54"/>
<polygon fill="black" stroke="black" points="1213.11,-262 1222.01,-256.26 1211.47,-255.19 1213.11,-262"/>
</g>
<!-- Parser&#45;&gt;ProbabilisticGrammarFuzzer -->
<g id="edge27" class="edge">
<title>Parser&#45;&gt;ProbabilisticGrammarFuzzer</title>
<path fill="none" stroke="black" d="M686.98,-226.17C641.15,-215.96 573.09,-200.64 504.2,-184.39"/>
<polygon fill="black" stroke="black" points="505.14,-181.02 494.61,-182.13 503.53,-187.83 505.14,-181.02"/>
</g>
<!-- Parser&#45;&gt;GreyboxGrammarFuzzer -->
<g id="edge28" class="edge">
<title>Parser&#45;&gt;GreyboxGrammarFuzzer</title>
<path fill="none" stroke="black" d="M722.65,-220.68C696.55,-195.27 647.68,-147.71 617.23,-118.07"/>
<polygon fill="black" stroke="black" points="619.86,-115.74 610.25,-111.27 614.97,-120.75 619.86,-115.74"/>
</g>
<!-- InformationFlow -->
<g id="node27" class="node">
<title>InformationFlow</title>
<g id="a_node27"><a xlink:href="InformationFlow.ipynb" xlink:title="Tracking Information Flow (InformationFlow)&#10;&#10;We have explored how one could generate better inputs that can penetrate deeper into the program in question. While doing so, we have relied on program crashes to tell us that we have succeeded in finding problems in the program. However, that is rather simplistic. What if the behavior of the program is simply incorrect, but does not lead to a crash? Can one do better?">
<polygon fill="white" stroke="black" points="868.95,-184 725.95,-184 725.95,-146 874.95,-146 874.95,-178 868.95,-184"/>
<polyline fill="none" stroke="black" points="868.95,-184 868.95,-178"/>
<polyline fill="none" stroke="black" points="874.95,-178 868.95,-178"/>
<text text-anchor="middle" x="800.45" y="-168.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Tracking Information</text>
<text text-anchor="middle" x="800.45" y="-153.8" font-family="Patua One, Helvetica, sans-serif" font-size="14.00" fill="#b03a2e">Flow</text>
</a>
</g>
</g>
<!-- Parser&#45;&gt;InformationFlow -->
<g id="edge29" class="edge">
<title>Parser&#45;&gt;InformationFlow</title>
<path fill="none" stroke="black" d="M754.98,-220.57C761.84,-212.33 770.2,-202.3 777.87,-193.1"/>
<polygon fill="black" stroke="black" points="780.54,-195.36 784.25,-185.44 775.16,-190.88 780.54,-195.36"/>
</g>
<!-- GeneratorGrammarFuzzer&#45;&gt;APIFuzzer -->
<g id="edge31" class="edge">
<title>GeneratorGrammarFuzzer&#45;&gt;APIFuzzer</title>
<path fill="none" stroke="black" d="M332.59,-145.65C349.52,-136.27 370.29,-124.77 388.24,-114.82"/>
<polygon fill="black" stroke="black" points="389.78,-117.97 396.84,-110.06 386.39,-111.85 389.78,-117.97"/>
</g>
<!-- WebFuzzer&#45;&gt;GUIFuzzer -->
<g id="edge35" class="edge">
<title>WebFuzzer&#45;&gt;GUIFuzzer</title>
<path fill="none" stroke="black" d="M1256.32,-219.83C1250.07,-211.79 1242.58,-202.17 1235.68,-193.29"/>
<polygon fill="black" stroke="black" points="1238.6,-191.35 1229.7,-185.61 1233.08,-195.65 1238.6,-191.35"/>
</g>
<!-- InformationFlow&#45;&gt;ConcolicFuzzer -->
<g id="edge33" class="edge">
<title>InformationFlow&#45;&gt;ConcolicFuzzer</title>
<path fill="none" stroke="black" d="M791.11,-145.83C787.04,-137.89 782.16,-128.41 777.65,-119.63"/>
<polygon fill="black" stroke="black" points="780.78,-118.06 773.09,-110.76 774.55,-121.26 780.78,-118.06"/>
</g>
<!-- InformationFlow&#45;&gt;GrammarMiner -->
<g id="edge32" class="edge">
<title>InformationFlow&#45;&gt;GrammarMiner</title>
<path fill="none" stroke="black" d="M836.4,-145.65C854.38,-136.46 876.34,-125.25 895.53,-115.45"/>
<polygon fill="black" stroke="black" points="896.91,-118.67 904.22,-111.01 893.73,-112.44 896.91,-118.67"/>
</g>
<!-- APIFuzzer&#45;&gt;Carver -->
<g id="edge34" class="edge">
<title>APIFuzzer&#45;&gt;Carver</title>
<path fill="none" stroke="black" d="M477.67,-78.44C486.88,-76.27 496.46,-74.05 505.45,-72 561.09,-59.34 624.05,-45.63 671.93,-35.32"/>
<polygon fill="black" stroke="black" points="672.63,-38.76 681.67,-33.23 671.15,-31.91 672.63,-38.76"/>
</g>
</g>
</svg>
