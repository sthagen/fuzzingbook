<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.50.0 (20211204.2007)
 -->
<!-- Pages: 1 -->
<svg width="569pt" height="818pt"
 viewBox="0.00 0.00 568.50 818.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 814)">
<g id="a_graph0"><a xlink:title="PGGCFuzzer class hierarchy">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-814 564.5,-814 564.5,4 -4,4"/>
</a>
</g>
<!-- PGGCFuzzer -->
<g id="node1" class="node">
<title>PGGCFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class PGGCFuzzer:&#10;The one grammar&#45;based fuzzer that supports all fuzzingbook features">
<polygon fill="none" stroke="black" points="155.5,-6.5 155.5,-42.5 247.5,-42.5 247.5,-6.5 155.5,-6.5"/>
<text text-anchor="start" x="163.5" y="-21.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">PGGCFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer -->
<g id="node2" class="node">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class ProbabilisticGeneratorGrammarCoverageFuzzer:&#10;Join the features of `GeneratorGrammarFuzzer`&#10;and `ProbabilisticGrammarCoverageFuzzer`">
<polygon fill="none" stroke="black" points="46,-85.5 46,-171.5 357,-171.5 357,-85.5 46,-85.5"/>
<text text-anchor="start" x="54" y="-157.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGeneratorGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="46,-148.5 357,-148.5 "/>
<g id="a_node2_0"><a xlink:href="#" xlink:title="ProbabilisticGeneratorGrammarCoverageFuzzer">
<g id="a_node2_1"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], *, replacement_attempts: int = 10, **kwargs) &#45;&gt; None:&#10;Constructor.&#10;`replacement_attempts` &#45; see `GeneratorGrammarFuzzer` constructor.&#10;All other keywords go into `ProbabilisticGrammarFuzzer`.">
<text text-anchor="start" x="144.5" y="-137" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_2"><a xlink:href="#" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="144.5" y="-126" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node2_3"><a xlink:href="#" xlink:title="add_tree_coverage(self, tree: DerivationTree) &#45;&gt; None">
<text text-anchor="start" x="144.5" y="-114" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_tree_coverage()</text>
</a>
</g>
<g id="a_node2_4"><a xlink:href="#" xlink:title="restart_expansion(self) &#45;&gt; None">
<text text-anchor="start" x="144.5" y="-104" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restart_expansion()</text>
</a>
</g>
<g id="a_node2_5"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="144.5" y="-93" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- PGGCFuzzer&#45;&gt;ProbabilisticGeneratorGrammarCoverageFuzzer -->
<g id="edge1" class="edge">
<title>PGGCFuzzer&#45;&gt;ProbabilisticGeneratorGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M201.5,-42.8C201.5,-51.86 201.5,-63.48 201.5,-75.19"/>
<polygon fill="none" stroke="black" points="198,-75.45 201.5,-85.45 205,-75.45 198,-75.45"/>
</g>
<!-- GeneratorGrammarFuzzer -->
<g id="node3" class="node">
<title>GeneratorGrammarFuzzer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class GeneratorGrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="0,-354.5 0,-539.5 185,-539.5 185,-354.5 0,-354.5"/>
<text text-anchor="start" x="11.5" y="-525.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GeneratorGrammarFuzzer</text>
<polyline fill="none" stroke="black" points="0,-516.5 185,-516.5 "/>
<g id="a_node3_6"><a xlink:href="#" xlink:title="GeneratorGrammarFuzzer">
<g id="a_node3_7"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], replacement_attempts: int = 10, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="8.5" y="-505.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_8"><a xlink:href="#" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="8.5" y="-494.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node3_9"><a xlink:href="#" xlink:title="apply_result(self, result: Any, children: List[DerivationTree]) &#45;&gt; List[DerivationTree]">
<text text-anchor="start" x="8.5" y="-482.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">apply_result()</text>
</a>
</g>
<g id="a_node3_10"><a xlink:href="#" xlink:title="choose_tree_expansion(self, tree: DerivationTree, expandable_children: List[DerivationTree]) &#45;&gt; int:&#10;Return index of subtree in `expandable_children`&#10;to be selected for expansion. Defaults to random.">
<text text-anchor="start" x="8.5" y="-472.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node3_11"><a xlink:href="#" xlink:title="eval_function(self, tree, function)">
<text text-anchor="start" x="8.5" y="-460.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">eval_function()</text>
</a>
</g>
<g id="a_node3_12"><a xlink:href="#" xlink:title="expand_tree_once(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="8.5" y="-450.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node3_13"><a xlink:href="#" xlink:title="find_expansion(self, tree)">
<text text-anchor="start" x="8.5" y="-438.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_expansion()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="process_chosen_children(self, children: List[DerivationTree], expansion: Expansion) &#45;&gt; List[DerivationTree]:&#10;Process children after selection. &#160;By default, does nothing.">
<text text-anchor="start" x="8.5" y="-428.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="reset_generators(self) &#45;&gt; None">
<text text-anchor="start" x="8.5" y="-416.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">reset_generators()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="restart_expansion(self) &#45;&gt; None">
<text text-anchor="start" x="8.5" y="-406.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restart_expansion()</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="#" xlink:title="run_generator(self, expansion: Expansion, function: Callable) &#45;&gt; Iterator">
<text text-anchor="start" x="8.5" y="-394.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_generator()</text>
</a>
</g>
<g id="a_node3_18"><a xlink:href="#" xlink:title="run_post_functions(self, tree: DerivationTree, depth: Union[int, float] = inf) &#45;&gt; Tuple[bool, Optional[List[DerivationTree]]]">
<text text-anchor="start" x="8.5" y="-383.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_post_functions()</text>
</a>
</g>
<g id="a_node3_19"><a xlink:href="#" xlink:title="run_post_functions_locally(self, new_tree: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="8.5" y="-372.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_post_functions_locally()</text>
</a>
</g>
<g id="a_node3_20"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="8.5" y="-362.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;GeneratorGrammarFuzzer -->
<g id="edge2" class="edge">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;GeneratorGrammarFuzzer</title>
<path fill="none" stroke="black" d="M187.03,-171.53C171.89,-215.49 147.56,-286.12 127.38,-344.73"/>
<polygon fill="none" stroke="black" points="123.99,-343.8 124.05,-354.4 130.61,-346.08 123.99,-343.8"/>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer -->
<g id="node6" class="node">
<title>ProbabilisticGrammarCoverageFuzzer</title>
<g id="a_node6"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="class ProbabilisticGrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="185.5,-208.5 185.5,-244.5 435.5,-244.5 435.5,-208.5 185.5,-208.5"/>
<text text-anchor="start" x="193.5" y="-223.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarCoverageFuzzer -->
<g id="edge5" class="edge">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M249.31,-171.61C261.07,-181.96 273.25,-192.69 283.62,-201.83"/>
<polygon fill="none" stroke="black" points="281.34,-204.48 291.16,-208.47 285.97,-199.23 281.34,-204.48"/>
</g>
<!-- GrammarFuzzer -->
<g id="node4" class="node">
<title>GrammarFuzzer</title>
<g id="a_node4"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="177.5,-655.5 177.5,-719.5 293.5,-719.5 293.5,-655.5 177.5,-655.5"/>
<text text-anchor="start" x="185.5" y="-705.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="177.5,-696.5 293.5,-696.5 "/>
<g id="a_node4_21"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node4_22"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="202.5" y="-685" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_23"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="202.5" y="-674" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node4_24"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="202.5" y="-663" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GeneratorGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge3" class="edge">
<title>GeneratorGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M86.96,-539.65C89.27,-567.07 96.01,-595.94 111.5,-619 125.07,-639.21 146.78,-653.89 168.26,-664.3"/>
<polygon fill="none" stroke="black" points="166.88,-667.52 177.43,-668.51 169.8,-661.16 166.88,-667.52"/>
</g>
<!-- Fuzzer -->
<g id="node5" class="node">
<title>Fuzzer</title>
<g id="a_node5"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="206.5,-756.5 206.5,-809.5 264.5,-809.5 264.5,-756.5 206.5,-756.5"/>
<text text-anchor="start" x="214.5" y="-795.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="206.5,-786.5 264.5,-786.5 "/>
<g id="a_node5_25"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node5_26"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object at 0x103cc5190&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="217.5" y="-775.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node5_27"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object at 0x103cc59a0&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="217.5" y="-764.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge4" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M235.5,-719.63C235.5,-728.09 235.5,-737.32 235.5,-746.03"/>
<polygon fill="none" stroke="black" points="232,-746.3 235.5,-756.3 239,-746.3 232,-746.3"/>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node7" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node7"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="223.5,-281.5 223.5,-317.5 397.5,-317.5 397.5,-281.5 223.5,-281.5"/>
<text text-anchor="start" x="231.5" y="-296.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge6" class="edge">
<title>ProbabilisticGrammarCoverageFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M310.5,-244.69C310.5,-252.71 310.5,-262.45 310.5,-271.43"/>
<polygon fill="none" stroke="black" points="307,-271.47 310.5,-281.47 314,-271.47 307,-271.47"/>
</g>
<!-- ProbabilisticGrammarFuzzer -->
<g id="node10" class="node">
<title>ProbabilisticGrammarFuzzer</title>
<g id="a_node10"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="class ProbabilisticGrammarFuzzer:&#10;A grammar&#45;based fuzzer respecting probabilities in grammars.">
<polygon fill="none" stroke="black" points="368.5,-579.5 368.5,-615.5 560.5,-615.5 560.5,-579.5 368.5,-579.5"/>
<text text-anchor="start" x="376.5" y="-594.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarFuzzer -->
<g id="edge10" class="edge">
<title>ProbabilisticGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarFuzzer</title>
<path fill="none" stroke="black" d="M357.9,-244.68C375.42,-253.18 394.02,-265.08 406.5,-281 474.75,-368.06 472.01,-509.97 467.35,-569.19"/>
<polygon fill="none" stroke="black" points="463.85,-568.99 466.47,-579.25 470.83,-569.59 463.85,-568.99"/>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node8" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node8"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="203,-429 203,-465 418,-465 418,-429 203,-429"/>
<text text-anchor="start" x="211" y="-444.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge7" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M310.5,-317.76C310.5,-342.7 310.5,-389.06 310.5,-418.68"/>
<polygon fill="none" stroke="black" points="307,-418.76 310.5,-428.76 314,-418.76 307,-418.76"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node9" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node9"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="121,-576.5 121,-618.5 350,-618.5 350,-576.5 121,-576.5"/>
<text text-anchor="start" x="129" y="-604.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="121,-595.5 350,-595.5 "/>
<g id="a_node9_28"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node9_29"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="205.5" y="-584" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge8" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M301.9,-465.03C289.33,-489.92 265.77,-536.56 250.36,-567.07"/>
<polygon fill="none" stroke="black" points="247.05,-565.86 245.67,-576.36 253.3,-569.01 247.05,-565.86"/>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge9" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M235.5,-618.91C235.5,-626.73 235.5,-635.96 235.5,-645.05"/>
<polygon fill="none" stroke="black" points="232,-645.16 235.5,-655.16 239,-645.16 232,-645.16"/>
</g>
<!-- ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge11" class="edge">
<title>ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M420.07,-615.57C386.86,-628.34 340.86,-646.01 303.1,-660.52"/>
<polygon fill="none" stroke="black" points="301.77,-657.29 293.69,-664.14 304.28,-663.82 301.77,-657.29"/>
</g>
<!-- Legend -->
<g id="node11" class="node">
<title>Legend</title>
<text text-anchor="start" x="265.5" y="-42" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="265.5" y="-32" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="272.5" y="-32" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="265.5" y="-22" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="272.5" y="-22" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="265.5" y="-12" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="272.5" y="-12" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="265.5" y="-2.8" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
