<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 7.1.0 (20230121.1956)
 -->
<!-- Pages: 1 -->
<svg width="589pt" height="704pt"
 viewBox="0.00 0.00 589.00 704.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 700)">
<g id="a_graph0"><a xlink:title="OptionRunner class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-700 585,-700 585,4 -4,4"/>
</a>
</g>
<!-- OptionRunner -->
<g id="node1" class="node">
<title>OptionRunner</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class OptionRunner:&#10;Run a program while determining its option grammar">
<polygon fill="none" stroke="black" points="1.5,-32 1.5,-162 114.5,-162 114.5,-32 1.5,-32"/>
<text text-anchor="start" x="14" y="-147.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionRunner</text>
<polyline fill="none" stroke="black" points="1.5,-139 114.5,-139"/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="OptionRunner">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, program: Union[str, List[str]], arguments: Optional[str] = None, *, log: bool = False, miner_class: Optional[Type[OptionGrammarMiner]] = None):&#10;Constructor.&#10;`program` &#45; the (Python) program to be executed&#10;`arguments` &#45; an (optional) string with arguments for `program`&#10;`log` &#45; if True, enable logging in miner&#10;`miner_class` &#45; the `OptionGrammarMiner` class to be used&#10;(default: `OptionGrammarMiner`)">
<text text-anchor="start" x="10" y="-127.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="ebnf_grammar(self):&#10;Return extracted grammar in EBNF form">
<text text-anchor="start" x="10" y="-116.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">ebnf_grammar()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="grammar(self):&#10;Return extracted grammar in BNF form">
<text text-anchor="start" x="10" y="-105.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">grammar()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="executable(self)">
<text text-anchor="start" x="10" y="-93.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">executable()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="find_contents(self)">
<text text-anchor="start" x="10" y="-82.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_contents()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="find_grammar(self)">
<text text-anchor="start" x="10" y="-71.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_grammar()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="invoker(self)">
<text text-anchor="start" x="10" y="-60.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">invoker()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="set_arguments(self, args)">
<text text-anchor="start" x="10" y="-49.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">set_arguments()</text>
</a>
</g>
<g id="a_node1_9"><a xlink:href="#" xlink:title="set_invocation(self, program)">
<text text-anchor="start" x="10" y="-38.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">set_invocation()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProgramRunner -->
<g id="node2" class="node">
<title>ProgramRunner</title>
<g id="a_node2"><a xlink:href="Fuzzer.ipynb" xlink:title="class ProgramRunner:&#10;Test a program with inputs.">
<polygon fill="none" stroke="black" points="0,-230.5 0,-272.5 116,-272.5 116,-230.5 0,-230.5"/>
<text text-anchor="start" x="8" y="-258.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProgramRunner</text>
<polyline fill="none" stroke="black" points="0,-249.5 116,-249.5"/>
<g id="a_node2_10"><a xlink:href="#" xlink:title="ProgramRunner">
<g id="a_node2_11"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self, program: Union[str, List[str]]) &#45;&gt; None:&#10;Initialize.&#10;`program` is a program spec as passed to `subprocess.run()`">
<text text-anchor="start" x="28" y="-238" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- OptionRunner&#45;&gt;ProgramRunner -->
<g id="edge1" class="edge">
<title>OptionRunner&#45;&gt;ProgramRunner</title>
<path fill="none" stroke="black" d="M58,-161.79C58,-181.76 58,-202.89 58,-219.53"/>
<polygon fill="none" stroke="black" points="54.5,-219.25 58,-229.25 61.5,-219.25 54.5,-219.25"/>
</g>
<!-- Runner -->
<g id="node3" class="node">
<title>Runner</title>
<g id="a_node3"><a xlink:href="Fuzzer.ipynb" xlink:title="class Runner:&#10;Base class for testing inputs.">
<polygon fill="none" stroke="black" points="19.5,-309.5 19.5,-403.5 96.5,-403.5 96.5,-309.5 19.5,-309.5"/>
<text text-anchor="start" x="35" y="-389.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Runner</text>
<polyline fill="none" stroke="black" points="19.5,-380.5 96.5,-380.5"/>
<g id="a_node3_12"><a xlink:href="#" xlink:title="Runner">
<g id="a_node3_13"><a xlink:href="Fuzzer.ipynb" xlink:title="FAIL = &#39;FAIL&#39;">
<text text-anchor="start" x="28" y="-368" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">FAIL</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="Fuzzer.ipynb" xlink:title="PASS = &#39;PASS&#39;">
<text text-anchor="start" x="28" y="-357" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">PASS</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="Fuzzer.ipynb" xlink:title="UNRESOLVED = &#39;UNRESOLVED&#39;">
<text text-anchor="start" x="28" y="-346" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">UNRESOLVED</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="19.5,-339.5 96.5,-339.5"/>
<g id="a_node3_16"><a xlink:href="#" xlink:title="Runner">
<g id="a_node3_17"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Initialize">
<text text-anchor="start" x="28" y="-328.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_18"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, inp: str) &#45;&gt; Any:&#10;Run the runner with the given input">
<text text-anchor="start" x="28" y="-317.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProgramRunner&#45;&gt;Runner -->
<g id="edge2" class="edge">
<title>ProgramRunner&#45;&gt;Runner</title>
<path fill="none" stroke="black" d="M58,-272.36C58,-279.92 58,-288.97 58,-298.28"/>
<polygon fill="none" stroke="black" points="54.5,-298.15 58,-308.15 61.5,-298.15 54.5,-298.15"/>
</g>
<!-- OptionFuzzer -->
<g id="node4" class="node">
<title>OptionFuzzer</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class OptionFuzzer:&#10;Fuzz a (Python) program using its arguments">
<polygon fill="none" stroke="black" points="172.5,-70.5 172.5,-123.5 271.5,-123.5 271.5,-70.5 172.5,-70.5"/>
<text text-anchor="start" x="180.5" y="-109.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionFuzzer</text>
<polyline fill="none" stroke="black" points="172.5,-100.5 271.5,-100.5"/>
<g id="a_node4_19"><a xlink:href="#" xlink:title="OptionFuzzer">
<g id="a_node4_20"><a xlink:href="#" xlink:title="__init__(self, runner: OptionRunner, *args, **kwargs):&#10;Constructor. `runner` is an OptionRunner.">
<text text-anchor="start" x="192" y="-89.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_21"><a xlink:href="#" xlink:title="run(self, runner=None, inp=&#39;&#39;):&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="192" y="-78.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node5" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node5"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="135,-233.5 135,-269.5 309,-269.5 309,-233.5 135,-233.5"/>
<text text-anchor="start" x="143" y="-248.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- OptionFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge3" class="edge">
<title>OptionFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M222,-123.18C222,-150.57 222,-194.23 222,-222.63"/>
<polygon fill="none" stroke="black" points="218.5,-222.26 222,-232.26 225.5,-222.26 218.5,-222.26"/>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node6" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node6"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="114.5,-338.5 114.5,-374.5 329.5,-374.5 329.5,-338.5 114.5,-338.5"/>
<text text-anchor="start" x="122.5" y="-353.8" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge4" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M222,-269.05C222,-284.72 222,-308.57 222,-327.26"/>
<polygon fill="none" stroke="black" points="218.5,-327.14 222,-337.14 225.5,-327.14 218.5,-327.14"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node7" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node7"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="107.5,-440.5 107.5,-482.5 336.5,-482.5 336.5,-440.5 107.5,-440.5"/>
<text text-anchor="start" x="115.5" y="-468.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="107.5,-459.5 336.5,-459.5"/>
<g id="a_node7_22"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node7_23"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="192" y="-448" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge5" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M222,-374.05C222,-388.98 222,-411.32 222,-429.55"/>
<polygon fill="none" stroke="black" points="218.5,-429.31 222,-439.31 225.5,-429.31 218.5,-429.31"/>
</g>
<!-- GrammarFuzzer -->
<g id="node8" class="node">
<title>GrammarFuzzer</title>
<g id="a_node8"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="164,-519.5 164,-583.5 280,-583.5 280,-519.5 164,-519.5"/>
<text text-anchor="start" x="172" y="-569.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="164,-560.5 280,-560.5"/>
<g id="a_node8_24"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node8_25"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="189" y="-549" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node8_26"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="189" y="-538" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node8_27"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="189" y="-527" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge6" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M222,-482.47C222,-490.17 222,-499.29 222,-508.31"/>
<polygon fill="none" stroke="black" points="218.5,-508.05 222,-518.05 225.5,-508.05 218.5,-508.05"/>
</g>
<!-- Fuzzer -->
<g id="node9" class="node">
<title>Fuzzer</title>
<g id="a_node9"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="183.5,-620.5 183.5,-695.5 260.5,-695.5 260.5,-620.5 183.5,-620.5"/>
<text text-anchor="start" x="201" y="-681.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="183.5,-672.5 260.5,-672.5"/>
<g id="a_node9_28"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node9_29"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor">
<text text-anchor="start" x="192" y="-661.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node9_30"><a xlink:href="Fuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Return fuzz input">
<text text-anchor="start" x="192" y="-650.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node9_31"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="192" y="-639.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node9_32"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="192" y="-628.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge7" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M222,-583.29C222,-591.41 222,-600.37 222,-609.16"/>
<polygon fill="none" stroke="black" points="218.5,-609.02 222,-619.02 225.5,-609.02 218.5,-609.02"/>
</g>
<!-- OptionGrammarMiner -->
<g id="node10" class="node">
<title>OptionGrammarMiner</title>
<g id="a_node10"><a xlink:href="#" xlink:title="class OptionGrammarMiner:&#10;Helper class for extracting option grammars">
<polygon fill="none" stroke="black" points="289.5,-0.5 289.5,-193.5 442.5,-193.5 442.5,-0.5 289.5,-0.5"/>
<text text-anchor="start" x="297.5" y="-179.3" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionGrammarMiner</text>
<polyline fill="none" stroke="black" points="289.5,-170.5 442.5,-170.5"/>
<g id="a_node10_33"><a xlink:href="#" xlink:title="OptionGrammarMiner">
<g id="a_node10_34"><a xlink:href="#" xlink:title="ARGUMENTS_SYMBOL = &#39;&lt;arguments&gt;&#39;">
<text text-anchor="start" x="318" y="-158.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">ARGUMENTS_SYMBOL</text>
</a>
</g>
<g id="a_node10_35"><a xlink:href="#" xlink:title="OPTION_SYMBOL = &#39;&lt;option&gt;&#39;">
<text text-anchor="start" x="318" y="-147.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">OPTION_SYMBOL</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="289.5,-140.5 442.5,-140.5"/>
<g id="a_node10_36"><a xlink:href="#" xlink:title="OptionGrammarMiner">
<g id="a_node10_37"><a xlink:href="#" xlink:title="__init__(self, function: Callable, log: bool = False):&#10;Constructor.&#10;`function` &#45; a function processing arguments using argparse()&#10;`log` &#45; output diagnostics if True">
<text text-anchor="start" x="309" y="-129.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node10_38"><a xlink:href="#" xlink:title="mine_ebnf_grammar(self):&#10;Extract EBNF option grammar">
<text text-anchor="start" x="309" y="-118.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">mine_ebnf_grammar()</text>
</a>
</g>
<g id="a_node10_39"><a xlink:href="#" xlink:title="mine_grammar(self):&#10;Extract BNF option grammar">
<text text-anchor="start" x="309" y="-107.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">mine_grammar()</text>
</a>
</g>
<g id="a_node10_40"><a xlink:href="#" xlink:title="add_group(self, locals, exclusive)">
<text text-anchor="start" x="309" y="-95.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_group()</text>
</a>
</g>
<g id="a_node10_41"><a xlink:href="#" xlink:title="add_int_rule(self)">
<text text-anchor="start" x="309" y="-84.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_int_rule()</text>
</a>
</g>
<g id="a_node10_42"><a xlink:href="#" xlink:title="add_metavar_rule(self, metavar, type_)">
<text text-anchor="start" x="309" y="-73.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_metavar_rule()</text>
</a>
</g>
<g id="a_node10_43"><a xlink:href="#" xlink:title="add_parameter(self, kwargs, metavar)">
<text text-anchor="start" x="309" y="-62.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_parameter()</text>
</a>
</g>
<g id="a_node10_44"><a xlink:href="#" xlink:title="add_str_rule(self)">
<text text-anchor="start" x="309" y="-51.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_str_rule()</text>
</a>
</g>
<g id="a_node10_45"><a xlink:href="#" xlink:title="add_type_rule(self, type_)">
<text text-anchor="start" x="309" y="-40.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_type_rule()</text>
</a>
</g>
<g id="a_node10_46"><a xlink:href="#" xlink:title="process_arg(self, arg, in_group, kwargs)">
<text text-anchor="start" x="309" y="-29.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_arg()</text>
</a>
</g>
<g id="a_node10_47"><a xlink:href="#" xlink:title="process_argument(self, locals, in_group)">
<text text-anchor="start" x="309" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_argument()</text>
</a>
</g>
<g id="a_node10_48"><a xlink:href="#" xlink:title="traceit(self, frame, event, arg)">
<text text-anchor="start" x="309" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Legend -->
<g id="node11" class="node">
<title>Legend</title>
<text text-anchor="start" x="461" y="-114.5" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="461" y="-104.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="468" y="-104.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="461" y="-94.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="468" y="-94.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="461" y="-84.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="468" y="-84.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="461" y="-75.3" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
